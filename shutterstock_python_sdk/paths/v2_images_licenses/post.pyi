# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from shutterstock_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from shutterstock_python_sdk.api_response import AsyncGeneratorResponse
from shutterstock_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401

from shutterstock_python_sdk.model.license_image_result_data_list import LicenseImageResultDataList as LicenseImageResultDataListSchema
from shutterstock_python_sdk.model.license_image_request_images import LicenseImageRequestImages as LicenseImageRequestImagesSchema
from shutterstock_python_sdk.model.license_image_request import LicenseImageRequest as LicenseImageRequestSchema

from shutterstock_python_sdk.type.license_image_request import LicenseImageRequest
from shutterstock_python_sdk.type.license_image_result_data_list import LicenseImageResultDataList
from shutterstock_python_sdk.type.license_image_request_images import LicenseImageRequestImages

from ...api_client import Dictionary
from shutterstock_python_sdk.pydantic.license_image_result_data_list import LicenseImageResultDataList as LicenseImageResultDataListPydantic
from shutterstock_python_sdk.pydantic.license_image_request import LicenseImageRequest as LicenseImageRequestPydantic
from shutterstock_python_sdk.pydantic.license_image_request_images import LicenseImageRequestImages as LicenseImageRequestImagesPydantic

# Query params
SubscriptionIdSchema = schemas.StrSchema


class FormatSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def EPS(cls):
        return cls("eps")
    
    @schemas.classproperty
    def JPG(cls):
        return cls("jpg")


class SizeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def SMALL(cls):
        return cls("small")
    
    @schemas.classproperty
    def MEDIUM(cls):
        return cls("medium")
    
    @schemas.classproperty
    def HUGE(cls):
        return cls("huge")
    
    @schemas.classproperty
    def VECTOR(cls):
        return cls("vector")
    
    @schemas.classproperty
    def CUSTOM(cls):
        return cls("custom")
SearchIdSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'subscription_id': typing.Union[SubscriptionIdSchema, str, ],
        'format': typing.Union[FormatSchema, str, ],
        'size': typing.Union[SizeSchema, str, ],
        'search_id': typing.Union[SearchIdSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_subscription_id = api_client.QueryParameter(
    name="subscription_id",
    style=api_client.ParameterStyle.FORM,
    schema=SubscriptionIdSchema,
    explode=True,
)
request_query_format = api_client.QueryParameter(
    name="format",
    style=api_client.ParameterStyle.FORM,
    schema=FormatSchema,
    explode=True,
)
request_query_size = api_client.QueryParameter(
    name="size",
    style=api_client.ParameterStyle.FORM,
    schema=SizeSchema,
    explode=True,
)
request_query_search_id = api_client.QueryParameter(
    name="search_id",
    style=api_client.ParameterStyle.FORM,
    schema=SearchIdSchema,
    explode=True,
)
# body param
SchemaForRequestBodyApplicationJson = LicenseImageRequestSchema


request_body_license_image_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = LicenseImageResultDataListSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: LicenseImageResultDataList


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: LicenseImageResultDataList


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _license_images_for_multiple_mapped_args(
        self,
        images: LicenseImageRequestImages,
        subscription_id: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        size: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _body = {}
        if images is not None:
            _body["images"] = images
        args.body = _body
        if subscription_id is not None:
            _query_params["subscription_id"] = subscription_id
        if format is not None:
            _query_params["format"] = format
        if size is not None:
            _query_params["size"] = size
        if search_id is not None:
            _query_params["search_id"] = search_id
        args.query = _query_params
        return args

    async def _alicense_images_for_multiple_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        License images
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_subscription_id,
            request_query_format,
            request_query_size,
            request_query_search_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/images/licenses',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_license_image_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _license_images_for_multiple_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        License images
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_subscription_id,
            request_query_format,
            request_query_size,
            request_query_search_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/images/licenses',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_license_image_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class LicenseImagesForMultipleRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alicense_images_for_multiple(
        self,
        images: LicenseImageRequestImages,
        subscription_id: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        size: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._license_images_for_multiple_mapped_args(
            images=images,
            subscription_id=subscription_id,
            format=format,
            size=size,
            search_id=search_id,
        )
        return await self._alicense_images_for_multiple_oapg(
            body=args.body,
            query_params=args.query,
            **kwargs,
        )
    
    def license_images_for_multiple(
        self,
        images: LicenseImageRequestImages,
        subscription_id: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        size: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._license_images_for_multiple_mapped_args(
            images=images,
            subscription_id=subscription_id,
            format=format,
            size=size,
            search_id=search_id,
        )
        return self._license_images_for_multiple_oapg(
            body=args.body,
            query_params=args.query,
        )

class LicenseImagesForMultiple(BaseApi):

    async def alicense_images_for_multiple(
        self,
        images: LicenseImageRequestImages,
        subscription_id: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        size: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> LicenseImageResultDataListPydantic:
        raw_response = await self.raw.alicense_images_for_multiple(
            images=images,
            subscription_id=subscription_id,
            format=format,
            size=size,
            search_id=search_id,
            **kwargs,
        )
        if validate:
            return LicenseImageResultDataListPydantic(**raw_response.body)
        return api_client.construct_model_instance(LicenseImageResultDataListPydantic, raw_response.body)
    
    
    def license_images_for_multiple(
        self,
        images: LicenseImageRequestImages,
        subscription_id: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        size: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
        validate: bool = False,
    ) -> LicenseImageResultDataListPydantic:
        raw_response = self.raw.license_images_for_multiple(
            images=images,
            subscription_id=subscription_id,
            format=format,
            size=size,
            search_id=search_id,
        )
        if validate:
            return LicenseImageResultDataListPydantic(**raw_response.body)
        return api_client.construct_model_instance(LicenseImageResultDataListPydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        images: LicenseImageRequestImages,
        subscription_id: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        size: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._license_images_for_multiple_mapped_args(
            images=images,
            subscription_id=subscription_id,
            format=format,
            size=size,
            search_id=search_id,
        )
        return await self._alicense_images_for_multiple_oapg(
            body=args.body,
            query_params=args.query,
            **kwargs,
        )
    
    def post(
        self,
        images: LicenseImageRequestImages,
        subscription_id: typing.Optional[str] = None,
        format: typing.Optional[str] = None,
        size: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._license_images_for_multiple_mapped_args(
            images=images,
            subscription_id=subscription_id,
            format=format,
            size=size,
            search_id=search_id,
        )
        return self._license_images_for_multiple_oapg(
            body=args.body,
            query_params=args.query,
        )

