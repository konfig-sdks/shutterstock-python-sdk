# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from shutterstock_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from shutterstock_python_sdk.api_response import AsyncGeneratorResponse
from shutterstock_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401

from shutterstock_python_sdk.model.language import Language as LanguageSchema
from shutterstock_python_sdk.model.bulk_image_search_results import BulkImageSearchResults as BulkImageSearchResultsSchema
from shutterstock_python_sdk.model.bulk_image_search_request import BulkImageSearchRequest as BulkImageSearchRequestSchema

from shutterstock_python_sdk.type.language import Language
from shutterstock_python_sdk.type.bulk_image_search_results import BulkImageSearchResults
from shutterstock_python_sdk.type.bulk_image_search_request import BulkImageSearchRequest

from ...api_client import Dictionary
from shutterstock_python_sdk.pydantic.language import Language as LanguagePydantic
from shutterstock_python_sdk.pydantic.bulk_image_search_results import BulkImageSearchResults as BulkImageSearchResultsPydantic
from shutterstock_python_sdk.pydantic.bulk_image_search_request import BulkImageSearchRequest as BulkImageSearchRequestPydantic

# Query params
AddedDateSchema = schemas.DateSchema
AddedDateStartSchema = schemas.DateSchema


class AspectRatioMinSchema(
    schemas.NumberSchema
):
    pass


class AspectRatioMaxSchema(
    schemas.NumberSchema
):
    pass


class AspectRatioSchema(
    schemas.NumberSchema
):
    pass
AddedDateEndSchema = schemas.DateSchema
CategorySchema = schemas.StrSchema
ColorSchema = schemas.StrSchema


class ContributorSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ContributorSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class ContributorCountrySchema(
    schemas.ComposedSchema,
):


    class MetaOapg:
        
        
        class one_of_0(
            schemas.ListSchema
        ):
        
        
            class MetaOapg:
                items = schemas.StrSchema
        
            def __new__(
                cls,
                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_0':
                return super().__new__(
                    cls,
                    arg,
                    _configuration=_configuration,
                )
        
            def __getitem__(self, i: int) -> MetaOapg.items:
                return super().__getitem__(i)
        
        
        class one_of_1(
            schemas.ListSchema
        ):
        
        
            class MetaOapg:
                items = schemas.StrSchema
        
            def __new__(
                cls,
                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_1':
                return super().__new__(
                    cls,
                    arg,
                    _configuration=_configuration,
                )
        
            def __getitem__(self, i: int) -> MetaOapg.items:
                return super().__getitem__(i)
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.one_of_0,
                cls.one_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContributorCountrySchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )


class FieldsSchema(
    schemas.StrSchema
):
    pass
HeightSchema = schemas.IntSchema
HeightFromSchema = schemas.IntSchema
HeightToSchema = schemas.IntSchema


class ImageTypeSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def PHOTO(cls):
                return cls("photo")
            
            @schemas.classproperty
            def ILLUSTRATION(cls):
                return cls("illustration")
            
            @schemas.classproperty
            def VECTOR(cls):
                return cls("vector")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ImageTypeSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
KeywordSafeSearchSchema = schemas.BoolSchema
LanguageSchema = LanguageSchema


class LicenseSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def COMMERCIAL(cls):
                return cls("commercial")
            
            @schemas.classproperty
            def EDITORIAL(cls):
                return cls("editorial")
            
            @schemas.classproperty
            def ENHANCED(cls):
                return cls("enhanced")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'LicenseSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class ModelSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ModelSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class OrientationSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def HORIZONTAL(cls):
        return cls("horizontal")
    
    @schemas.classproperty
    def VERTICAL(cls):
        return cls("vertical")


class PageSchema(
    schemas.IntSchema
):
    pass


class PerPageSchema(
    schemas.IntSchema
):
    pass
PeopleModelReleasedSchema = schemas.BoolSchema


class PeopleAgeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def INFANTS(cls):
        return cls("infants")
    
    @schemas.classproperty
    def CHILDREN(cls):
        return cls("children")
    
    @schemas.classproperty
    def TEENAGERS(cls):
        return cls("teenagers")
    
    @schemas.classproperty
    def _20S(cls):
        return cls("20s")
    
    @schemas.classproperty
    def _30S(cls):
        return cls("30s")
    
    @schemas.classproperty
    def _40S(cls):
        return cls("40s")
    
    @schemas.classproperty
    def _50S(cls):
        return cls("50s")
    
    @schemas.classproperty
    def _60S(cls):
        return cls("60s")
    
    @schemas.classproperty
    def OLDER(cls):
        return cls("older")


class PeopleEthnicitySchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def AFRICAN(cls):
                return cls("african")
            
            @schemas.classproperty
            def AFRICAN_AMERICAN(cls):
                return cls("african_american")
            
            @schemas.classproperty
            def BLACK(cls):
                return cls("black")
            
            @schemas.classproperty
            def BRAZILIAN(cls):
                return cls("brazilian")
            
            @schemas.classproperty
            def CHINESE(cls):
                return cls("chinese")
            
            @schemas.classproperty
            def CAUCASIAN(cls):
                return cls("caucasian")
            
            @schemas.classproperty
            def EAST_ASIAN(cls):
                return cls("east_asian")
            
            @schemas.classproperty
            def HISPANIC(cls):
                return cls("hispanic")
            
            @schemas.classproperty
            def JAPANESE(cls):
                return cls("japanese")
            
            @schemas.classproperty
            def MIDDLE_EASTERN(cls):
                return cls("middle_eastern")
            
            @schemas.classproperty
            def NATIVE_AMERICAN(cls):
                return cls("native_american")
            
            @schemas.classproperty
            def PACIFIC_ISLANDER(cls):
                return cls("pacific_islander")
            
            @schemas.classproperty
            def SOUTH_ASIAN(cls):
                return cls("south_asian")
            
            @schemas.classproperty
            def SOUTHEAST_ASIAN(cls):
                return cls("southeast_asian")
            
            @schemas.classproperty
            def OTHER(cls):
                return cls("other")
            
            @schemas.classproperty
            def NOT_AFRICAN(cls):
                return cls("NOT african")
            
            @schemas.classproperty
            def NOT_AFRICAN_AMERICAN(cls):
                return cls("NOT african_american")
            
            @schemas.classproperty
            def NOT_BLACK(cls):
                return cls("NOT black")
            
            @schemas.classproperty
            def NOT_BRAZILIAN(cls):
                return cls("NOT brazilian")
            
            @schemas.classproperty
            def NOT_CHINESE(cls):
                return cls("NOT chinese")
            
            @schemas.classproperty
            def NOT_CAUCASIAN(cls):
                return cls("NOT caucasian")
            
            @schemas.classproperty
            def NOT_EAST_ASIAN(cls):
                return cls("NOT east_asian")
            
            @schemas.classproperty
            def NOT_HISPANIC(cls):
                return cls("NOT hispanic")
            
            @schemas.classproperty
            def NOT_JAPANESE(cls):
                return cls("NOT japanese")
            
            @schemas.classproperty
            def NOT_MIDDLE_EASTERN(cls):
                return cls("NOT middle_eastern")
            
            @schemas.classproperty
            def NOT_NATIVE_AMERICAN(cls):
                return cls("NOT native_american")
            
            @schemas.classproperty
            def NOT_PACIFIC_ISLANDER(cls):
                return cls("NOT pacific_islander")
            
            @schemas.classproperty
            def NOT_SOUTH_ASIAN(cls):
                return cls("NOT south_asian")
            
            @schemas.classproperty
            def NOT_SOUTHEAST_ASIAN(cls):
                return cls("NOT southeast_asian")
            
            @schemas.classproperty
            def NOT_OTHER(cls):
                return cls("NOT other")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PeopleEthnicitySchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class PeopleGenderSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def MALE(cls):
        return cls("male")
    
    @schemas.classproperty
    def FEMALE(cls):
        return cls("female")
    
    @schemas.classproperty
    def BOTH(cls):
        return cls("both")


class PeopleNumberSchema(
    schemas.IntSchema
):
    pass


class RegionSchema(
    schemas.ComposedSchema,
):


    class MetaOapg:
        any_of_0 = schemas.StrSchema
        any_of_1 = schemas.StrSchema
        
        @classmethod
        @functools.lru_cache()
        def any_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.any_of_0,
                cls.any_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RegionSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
SafeSchema = schemas.BoolSchema


class SortSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def NEWEST(cls):
        return cls("newest")
    
    @schemas.classproperty
    def POPULAR(cls):
        return cls("popular")
    
    @schemas.classproperty
    def RELEVANCE(cls):
        return cls("relevance")
    
    @schemas.classproperty
    def RANDOM(cls):
        return cls("random")
SpellcheckQuerySchema = schemas.BoolSchema


class ViewSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def MINIMAL(cls):
        return cls("minimal")
    
    @schemas.classproperty
    def FULL(cls):
        return cls("full")
WidthSchema = schemas.IntSchema
WidthFromSchema = schemas.IntSchema
WidthToSchema = schemas.IntSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'added_date': typing.Union[AddedDateSchema, str, date, ],
        'added_date_start': typing.Union[AddedDateStartSchema, str, date, ],
        'aspect_ratio_min': typing.Union[AspectRatioMinSchema, decimal.Decimal, int, float, ],
        'aspect_ratio_max': typing.Union[AspectRatioMaxSchema, decimal.Decimal, int, float, ],
        'aspect_ratio': typing.Union[AspectRatioSchema, decimal.Decimal, int, float, ],
        'added_date_end': typing.Union[AddedDateEndSchema, str, date, ],
        'category': typing.Union[CategorySchema, str, ],
        'color': typing.Union[ColorSchema, str, ],
        'contributor': typing.Union[ContributorSchema, list, tuple, ],
        'contributor_country': typing.Union[ContributorCountrySchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        'fields': typing.Union[FieldsSchema, str, ],
        'height': typing.Union[HeightSchema, decimal.Decimal, int, ],
        'height_from': typing.Union[HeightFromSchema, decimal.Decimal, int, ],
        'height_to': typing.Union[HeightToSchema, decimal.Decimal, int, ],
        'image_type': typing.Union[ImageTypeSchema, list, tuple, ],
        'keyword_safe_search': typing.Union[KeywordSafeSearchSchema, bool, ],
        'language': typing.Union[LanguageSchema, ],
        'license': typing.Union[LicenseSchema, list, tuple, ],
        'model': typing.Union[ModelSchema, list, tuple, ],
        'orientation': typing.Union[OrientationSchema, str, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'per_page': typing.Union[PerPageSchema, decimal.Decimal, int, ],
        'people_model_released': typing.Union[PeopleModelReleasedSchema, bool, ],
        'people_age': typing.Union[PeopleAgeSchema, str, ],
        'people_ethnicity': typing.Union[PeopleEthnicitySchema, list, tuple, ],
        'people_gender': typing.Union[PeopleGenderSchema, str, ],
        'people_number': typing.Union[PeopleNumberSchema, decimal.Decimal, int, ],
        'region': typing.Union[RegionSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        'safe': typing.Union[SafeSchema, bool, ],
        'sort': typing.Union[SortSchema, str, ],
        'spellcheck_query': typing.Union[SpellcheckQuerySchema, bool, ],
        'view': typing.Union[ViewSchema, str, ],
        'width': typing.Union[WidthSchema, decimal.Decimal, int, ],
        'width_from': typing.Union[WidthFromSchema, decimal.Decimal, int, ],
        'width_to': typing.Union[WidthToSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_added_date = api_client.QueryParameter(
    name="added_date",
    style=api_client.ParameterStyle.FORM,
    schema=AddedDateSchema,
    explode=True,
)
request_query_added_date_start = api_client.QueryParameter(
    name="added_date_start",
    style=api_client.ParameterStyle.FORM,
    schema=AddedDateStartSchema,
    explode=True,
)
request_query_aspect_ratio_min = api_client.QueryParameter(
    name="aspect_ratio_min",
    style=api_client.ParameterStyle.FORM,
    schema=AspectRatioMinSchema,
    explode=True,
)
request_query_aspect_ratio_max = api_client.QueryParameter(
    name="aspect_ratio_max",
    style=api_client.ParameterStyle.FORM,
    schema=AspectRatioMaxSchema,
    explode=True,
)
request_query_aspect_ratio = api_client.QueryParameter(
    name="aspect_ratio",
    style=api_client.ParameterStyle.FORM,
    schema=AspectRatioSchema,
    explode=True,
)
request_query_added_date_end = api_client.QueryParameter(
    name="added_date_end",
    style=api_client.ParameterStyle.FORM,
    schema=AddedDateEndSchema,
    explode=True,
)
request_query_category = api_client.QueryParameter(
    name="category",
    style=api_client.ParameterStyle.FORM,
    schema=CategorySchema,
    explode=True,
)
request_query_color = api_client.QueryParameter(
    name="color",
    style=api_client.ParameterStyle.FORM,
    schema=ColorSchema,
    explode=True,
)
request_query_contributor = api_client.QueryParameter(
    name="contributor",
    style=api_client.ParameterStyle.FORM,
    schema=ContributorSchema,
    explode=True,
)
request_query_contributor_country = api_client.QueryParameter(
    name="contributor_country",
    style=api_client.ParameterStyle.FORM,
    schema=ContributorCountrySchema,
    explode=True,
)
request_query_fields = api_client.QueryParameter(
    name="fields",
    style=api_client.ParameterStyle.FORM,
    schema=FieldsSchema,
    explode=True,
)
request_query_height = api_client.QueryParameter(
    name="height",
    style=api_client.ParameterStyle.FORM,
    schema=HeightSchema,
    explode=True,
)
request_query_height_from = api_client.QueryParameter(
    name="height_from",
    style=api_client.ParameterStyle.FORM,
    schema=HeightFromSchema,
    explode=True,
)
request_query_height_to = api_client.QueryParameter(
    name="height_to",
    style=api_client.ParameterStyle.FORM,
    schema=HeightToSchema,
    explode=True,
)
request_query_image_type = api_client.QueryParameter(
    name="image_type",
    style=api_client.ParameterStyle.FORM,
    schema=ImageTypeSchema,
    explode=True,
)
request_query_keyword_safe_search = api_client.QueryParameter(
    name="keyword_safe_search",
    style=api_client.ParameterStyle.FORM,
    schema=KeywordSafeSearchSchema,
    explode=True,
)
request_query_language = api_client.QueryParameter(
    name="language",
    style=api_client.ParameterStyle.FORM,
    schema=LanguageSchema,
    explode=True,
)
request_query_license = api_client.QueryParameter(
    name="license",
    style=api_client.ParameterStyle.FORM,
    schema=LicenseSchema,
    explode=True,
)
request_query_model = api_client.QueryParameter(
    name="model",
    style=api_client.ParameterStyle.FORM,
    schema=ModelSchema,
    explode=True,
)
request_query_orientation = api_client.QueryParameter(
    name="orientation",
    style=api_client.ParameterStyle.FORM,
    schema=OrientationSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_per_page = api_client.QueryParameter(
    name="per_page",
    style=api_client.ParameterStyle.FORM,
    schema=PerPageSchema,
    explode=True,
)
request_query_people_model_released = api_client.QueryParameter(
    name="people_model_released",
    style=api_client.ParameterStyle.FORM,
    schema=PeopleModelReleasedSchema,
    explode=True,
)
request_query_people_age = api_client.QueryParameter(
    name="people_age",
    style=api_client.ParameterStyle.FORM,
    schema=PeopleAgeSchema,
    explode=True,
)
request_query_people_ethnicity = api_client.QueryParameter(
    name="people_ethnicity",
    style=api_client.ParameterStyle.FORM,
    schema=PeopleEthnicitySchema,
    explode=True,
)
request_query_people_gender = api_client.QueryParameter(
    name="people_gender",
    style=api_client.ParameterStyle.FORM,
    schema=PeopleGenderSchema,
    explode=True,
)
request_query_people_number = api_client.QueryParameter(
    name="people_number",
    style=api_client.ParameterStyle.FORM,
    schema=PeopleNumberSchema,
    explode=True,
)
request_query_region = api_client.QueryParameter(
    name="region",
    style=api_client.ParameterStyle.FORM,
    schema=RegionSchema,
    explode=True,
)
request_query_safe = api_client.QueryParameter(
    name="safe",
    style=api_client.ParameterStyle.FORM,
    schema=SafeSchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="sort",
    style=api_client.ParameterStyle.FORM,
    schema=SortSchema,
    explode=True,
)
request_query_spellcheck_query = api_client.QueryParameter(
    name="spellcheck_query",
    style=api_client.ParameterStyle.FORM,
    schema=SpellcheckQuerySchema,
    explode=True,
)
request_query_view = api_client.QueryParameter(
    name="view",
    style=api_client.ParameterStyle.FORM,
    schema=ViewSchema,
    explode=True,
)
request_query_width = api_client.QueryParameter(
    name="width",
    style=api_client.ParameterStyle.FORM,
    schema=WidthSchema,
    explode=True,
)
request_query_width_from = api_client.QueryParameter(
    name="width_from",
    style=api_client.ParameterStyle.FORM,
    schema=WidthFromSchema,
    explode=True,
)
request_query_width_to = api_client.QueryParameter(
    name="width_to",
    style=api_client.ParameterStyle.FORM,
    schema=WidthToSchema,
    explode=True,
)
# body param
SchemaForRequestBodyApplicationJson = BulkImageSearchRequestSchema


request_body_bulk_image_search_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = BulkImageSearchResultsSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: BulkImageSearchResults


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: BulkImageSearchResults


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _run_multiple_searches_mapped_args(
        self,
        body: BulkImageSearchRequest,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        aspect_ratio_min: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio_max: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio: typing.Optional[typing.Union[int, float]] = None,
        added_date_end: typing.Optional[date] = None,
        category: typing.Optional[str] = None,
        color: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.Union[typing.List[str], typing.List[str]]] = None,
        fields: typing.Optional[str] = None,
        height: typing.Optional[int] = None,
        height_from: typing.Optional[int] = None,
        height_to: typing.Optional[int] = None,
        image_type: typing.Optional[typing.List[str]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        orientation: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        region: typing.Optional[typing.Union[str, str]] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        spellcheck_query: typing.Optional[bool] = None,
        view: typing.Optional[str] = None,
        width: typing.Optional[int] = None,
        width_from: typing.Optional[int] = None,
        width_to: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _body = {}
        args.body = body if body is not None else _body
        if added_date is not None:
            _query_params["added_date"] = added_date
        if added_date_start is not None:
            _query_params["added_date_start"] = added_date_start
        if aspect_ratio_min is not None:
            _query_params["aspect_ratio_min"] = aspect_ratio_min
        if aspect_ratio_max is not None:
            _query_params["aspect_ratio_max"] = aspect_ratio_max
        if aspect_ratio is not None:
            _query_params["aspect_ratio"] = aspect_ratio
        if added_date_end is not None:
            _query_params["added_date_end"] = added_date_end
        if category is not None:
            _query_params["category"] = category
        if color is not None:
            _query_params["color"] = color
        if contributor is not None:
            _query_params["contributor"] = contributor
        if contributor_country is not None:
            _query_params["contributor_country"] = contributor_country
        if fields is not None:
            _query_params["fields"] = fields
        if height is not None:
            _query_params["height"] = height
        if height_from is not None:
            _query_params["height_from"] = height_from
        if height_to is not None:
            _query_params["height_to"] = height_to
        if image_type is not None:
            _query_params["image_type"] = image_type
        if keyword_safe_search is not None:
            _query_params["keyword_safe_search"] = keyword_safe_search
        if language is not None:
            _query_params["language"] = language
        if license is not None:
            _query_params["license"] = license
        if model is not None:
            _query_params["model"] = model
        if orientation is not None:
            _query_params["orientation"] = orientation
        if page is not None:
            _query_params["page"] = page
        if per_page is not None:
            _query_params["per_page"] = per_page
        if people_model_released is not None:
            _query_params["people_model_released"] = people_model_released
        if people_age is not None:
            _query_params["people_age"] = people_age
        if people_ethnicity is not None:
            _query_params["people_ethnicity"] = people_ethnicity
        if people_gender is not None:
            _query_params["people_gender"] = people_gender
        if people_number is not None:
            _query_params["people_number"] = people_number
        if region is not None:
            _query_params["region"] = region
        if safe is not None:
            _query_params["safe"] = safe
        if sort is not None:
            _query_params["sort"] = sort
        if spellcheck_query is not None:
            _query_params["spellcheck_query"] = spellcheck_query
        if view is not None:
            _query_params["view"] = view
        if width is not None:
            _query_params["width"] = width
        if width_from is not None:
            _query_params["width_from"] = width_from
        if width_to is not None:
            _query_params["width_to"] = width_to
        args.query = _query_params
        return args

    async def _arun_multiple_searches_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Run multiple image searches
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_added_date,
            request_query_added_date_start,
            request_query_aspect_ratio_min,
            request_query_aspect_ratio_max,
            request_query_aspect_ratio,
            request_query_added_date_end,
            request_query_category,
            request_query_color,
            request_query_contributor,
            request_query_contributor_country,
            request_query_fields,
            request_query_height,
            request_query_height_from,
            request_query_height_to,
            request_query_image_type,
            request_query_keyword_safe_search,
            request_query_language,
            request_query_license,
            request_query_model,
            request_query_orientation,
            request_query_page,
            request_query_per_page,
            request_query_people_model_released,
            request_query_people_age,
            request_query_people_ethnicity,
            request_query_people_gender,
            request_query_people_number,
            request_query_region,
            request_query_safe,
            request_query_sort,
            request_query_spellcheck_query,
            request_query_view,
            request_query_width,
            request_query_width_from,
            request_query_width_to,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/bulk_search/images',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_bulk_image_search_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _run_multiple_searches_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Run multiple image searches
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_added_date,
            request_query_added_date_start,
            request_query_aspect_ratio_min,
            request_query_aspect_ratio_max,
            request_query_aspect_ratio,
            request_query_added_date_end,
            request_query_category,
            request_query_color,
            request_query_contributor,
            request_query_contributor_country,
            request_query_fields,
            request_query_height,
            request_query_height_from,
            request_query_height_to,
            request_query_image_type,
            request_query_keyword_safe_search,
            request_query_language,
            request_query_license,
            request_query_model,
            request_query_orientation,
            request_query_page,
            request_query_per_page,
            request_query_people_model_released,
            request_query_people_age,
            request_query_people_ethnicity,
            request_query_people_gender,
            request_query_people_number,
            request_query_region,
            request_query_safe,
            request_query_sort,
            request_query_spellcheck_query,
            request_query_view,
            request_query_width,
            request_query_width_from,
            request_query_width_to,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/bulk_search/images',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_bulk_image_search_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class RunMultipleSearchesRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def arun_multiple_searches(
        self,
        body: BulkImageSearchRequest,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        aspect_ratio_min: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio_max: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio: typing.Optional[typing.Union[int, float]] = None,
        added_date_end: typing.Optional[date] = None,
        category: typing.Optional[str] = None,
        color: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.Union[typing.List[str], typing.List[str]]] = None,
        fields: typing.Optional[str] = None,
        height: typing.Optional[int] = None,
        height_from: typing.Optional[int] = None,
        height_to: typing.Optional[int] = None,
        image_type: typing.Optional[typing.List[str]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        orientation: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        region: typing.Optional[typing.Union[str, str]] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        spellcheck_query: typing.Optional[bool] = None,
        view: typing.Optional[str] = None,
        width: typing.Optional[int] = None,
        width_from: typing.Optional[int] = None,
        width_to: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._run_multiple_searches_mapped_args(
            body=body,
            added_date=added_date,
            added_date_start=added_date_start,
            aspect_ratio_min=aspect_ratio_min,
            aspect_ratio_max=aspect_ratio_max,
            aspect_ratio=aspect_ratio,
            added_date_end=added_date_end,
            category=category,
            color=color,
            contributor=contributor,
            contributor_country=contributor_country,
            fields=fields,
            height=height,
            height_from=height_from,
            height_to=height_to,
            image_type=image_type,
            keyword_safe_search=keyword_safe_search,
            language=language,
            license=license,
            model=model,
            orientation=orientation,
            page=page,
            per_page=per_page,
            people_model_released=people_model_released,
            people_age=people_age,
            people_ethnicity=people_ethnicity,
            people_gender=people_gender,
            people_number=people_number,
            region=region,
            safe=safe,
            sort=sort,
            spellcheck_query=spellcheck_query,
            view=view,
            width=width,
            width_from=width_from,
            width_to=width_to,
        )
        return await self._arun_multiple_searches_oapg(
            body=args.body,
            query_params=args.query,
            **kwargs,
        )
    
    def run_multiple_searches(
        self,
        body: BulkImageSearchRequest,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        aspect_ratio_min: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio_max: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio: typing.Optional[typing.Union[int, float]] = None,
        added_date_end: typing.Optional[date] = None,
        category: typing.Optional[str] = None,
        color: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.Union[typing.List[str], typing.List[str]]] = None,
        fields: typing.Optional[str] = None,
        height: typing.Optional[int] = None,
        height_from: typing.Optional[int] = None,
        height_to: typing.Optional[int] = None,
        image_type: typing.Optional[typing.List[str]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        orientation: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        region: typing.Optional[typing.Union[str, str]] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        spellcheck_query: typing.Optional[bool] = None,
        view: typing.Optional[str] = None,
        width: typing.Optional[int] = None,
        width_from: typing.Optional[int] = None,
        width_to: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._run_multiple_searches_mapped_args(
            body=body,
            added_date=added_date,
            added_date_start=added_date_start,
            aspect_ratio_min=aspect_ratio_min,
            aspect_ratio_max=aspect_ratio_max,
            aspect_ratio=aspect_ratio,
            added_date_end=added_date_end,
            category=category,
            color=color,
            contributor=contributor,
            contributor_country=contributor_country,
            fields=fields,
            height=height,
            height_from=height_from,
            height_to=height_to,
            image_type=image_type,
            keyword_safe_search=keyword_safe_search,
            language=language,
            license=license,
            model=model,
            orientation=orientation,
            page=page,
            per_page=per_page,
            people_model_released=people_model_released,
            people_age=people_age,
            people_ethnicity=people_ethnicity,
            people_gender=people_gender,
            people_number=people_number,
            region=region,
            safe=safe,
            sort=sort,
            spellcheck_query=spellcheck_query,
            view=view,
            width=width,
            width_from=width_from,
            width_to=width_to,
        )
        return self._run_multiple_searches_oapg(
            body=args.body,
            query_params=args.query,
        )

class RunMultipleSearches(BaseApi):

    async def arun_multiple_searches(
        self,
        body: BulkImageSearchRequest,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        aspect_ratio_min: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio_max: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio: typing.Optional[typing.Union[int, float]] = None,
        added_date_end: typing.Optional[date] = None,
        category: typing.Optional[str] = None,
        color: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.Union[typing.List[str], typing.List[str]]] = None,
        fields: typing.Optional[str] = None,
        height: typing.Optional[int] = None,
        height_from: typing.Optional[int] = None,
        height_to: typing.Optional[int] = None,
        image_type: typing.Optional[typing.List[str]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        orientation: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        region: typing.Optional[typing.Union[str, str]] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        spellcheck_query: typing.Optional[bool] = None,
        view: typing.Optional[str] = None,
        width: typing.Optional[int] = None,
        width_from: typing.Optional[int] = None,
        width_to: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> BulkImageSearchResultsPydantic:
        raw_response = await self.raw.arun_multiple_searches(
            body=body,
            added_date=added_date,
            added_date_start=added_date_start,
            aspect_ratio_min=aspect_ratio_min,
            aspect_ratio_max=aspect_ratio_max,
            aspect_ratio=aspect_ratio,
            added_date_end=added_date_end,
            category=category,
            color=color,
            contributor=contributor,
            contributor_country=contributor_country,
            fields=fields,
            height=height,
            height_from=height_from,
            height_to=height_to,
            image_type=image_type,
            keyword_safe_search=keyword_safe_search,
            language=language,
            license=license,
            model=model,
            orientation=orientation,
            page=page,
            per_page=per_page,
            people_model_released=people_model_released,
            people_age=people_age,
            people_ethnicity=people_ethnicity,
            people_gender=people_gender,
            people_number=people_number,
            region=region,
            safe=safe,
            sort=sort,
            spellcheck_query=spellcheck_query,
            view=view,
            width=width,
            width_from=width_from,
            width_to=width_to,
            **kwargs,
        )
        if validate:
            return BulkImageSearchResultsPydantic(**raw_response.body)
        return api_client.construct_model_instance(BulkImageSearchResultsPydantic, raw_response.body)
    
    
    def run_multiple_searches(
        self,
        body: BulkImageSearchRequest,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        aspect_ratio_min: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio_max: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio: typing.Optional[typing.Union[int, float]] = None,
        added_date_end: typing.Optional[date] = None,
        category: typing.Optional[str] = None,
        color: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.Union[typing.List[str], typing.List[str]]] = None,
        fields: typing.Optional[str] = None,
        height: typing.Optional[int] = None,
        height_from: typing.Optional[int] = None,
        height_to: typing.Optional[int] = None,
        image_type: typing.Optional[typing.List[str]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        orientation: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        region: typing.Optional[typing.Union[str, str]] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        spellcheck_query: typing.Optional[bool] = None,
        view: typing.Optional[str] = None,
        width: typing.Optional[int] = None,
        width_from: typing.Optional[int] = None,
        width_to: typing.Optional[int] = None,
        validate: bool = False,
    ) -> BulkImageSearchResultsPydantic:
        raw_response = self.raw.run_multiple_searches(
            body=body,
            added_date=added_date,
            added_date_start=added_date_start,
            aspect_ratio_min=aspect_ratio_min,
            aspect_ratio_max=aspect_ratio_max,
            aspect_ratio=aspect_ratio,
            added_date_end=added_date_end,
            category=category,
            color=color,
            contributor=contributor,
            contributor_country=contributor_country,
            fields=fields,
            height=height,
            height_from=height_from,
            height_to=height_to,
            image_type=image_type,
            keyword_safe_search=keyword_safe_search,
            language=language,
            license=license,
            model=model,
            orientation=orientation,
            page=page,
            per_page=per_page,
            people_model_released=people_model_released,
            people_age=people_age,
            people_ethnicity=people_ethnicity,
            people_gender=people_gender,
            people_number=people_number,
            region=region,
            safe=safe,
            sort=sort,
            spellcheck_query=spellcheck_query,
            view=view,
            width=width,
            width_from=width_from,
            width_to=width_to,
        )
        if validate:
            return BulkImageSearchResultsPydantic(**raw_response.body)
        return api_client.construct_model_instance(BulkImageSearchResultsPydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        body: BulkImageSearchRequest,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        aspect_ratio_min: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio_max: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio: typing.Optional[typing.Union[int, float]] = None,
        added_date_end: typing.Optional[date] = None,
        category: typing.Optional[str] = None,
        color: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.Union[typing.List[str], typing.List[str]]] = None,
        fields: typing.Optional[str] = None,
        height: typing.Optional[int] = None,
        height_from: typing.Optional[int] = None,
        height_to: typing.Optional[int] = None,
        image_type: typing.Optional[typing.List[str]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        orientation: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        region: typing.Optional[typing.Union[str, str]] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        spellcheck_query: typing.Optional[bool] = None,
        view: typing.Optional[str] = None,
        width: typing.Optional[int] = None,
        width_from: typing.Optional[int] = None,
        width_to: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._run_multiple_searches_mapped_args(
            body=body,
            added_date=added_date,
            added_date_start=added_date_start,
            aspect_ratio_min=aspect_ratio_min,
            aspect_ratio_max=aspect_ratio_max,
            aspect_ratio=aspect_ratio,
            added_date_end=added_date_end,
            category=category,
            color=color,
            contributor=contributor,
            contributor_country=contributor_country,
            fields=fields,
            height=height,
            height_from=height_from,
            height_to=height_to,
            image_type=image_type,
            keyword_safe_search=keyword_safe_search,
            language=language,
            license=license,
            model=model,
            orientation=orientation,
            page=page,
            per_page=per_page,
            people_model_released=people_model_released,
            people_age=people_age,
            people_ethnicity=people_ethnicity,
            people_gender=people_gender,
            people_number=people_number,
            region=region,
            safe=safe,
            sort=sort,
            spellcheck_query=spellcheck_query,
            view=view,
            width=width,
            width_from=width_from,
            width_to=width_to,
        )
        return await self._arun_multiple_searches_oapg(
            body=args.body,
            query_params=args.query,
            **kwargs,
        )
    
    def post(
        self,
        body: BulkImageSearchRequest,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        aspect_ratio_min: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio_max: typing.Optional[typing.Union[int, float]] = None,
        aspect_ratio: typing.Optional[typing.Union[int, float]] = None,
        added_date_end: typing.Optional[date] = None,
        category: typing.Optional[str] = None,
        color: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.Union[typing.List[str], typing.List[str]]] = None,
        fields: typing.Optional[str] = None,
        height: typing.Optional[int] = None,
        height_from: typing.Optional[int] = None,
        height_to: typing.Optional[int] = None,
        image_type: typing.Optional[typing.List[str]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        orientation: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        region: typing.Optional[typing.Union[str, str]] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        spellcheck_query: typing.Optional[bool] = None,
        view: typing.Optional[str] = None,
        width: typing.Optional[int] = None,
        width_from: typing.Optional[int] = None,
        width_to: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._run_multiple_searches_mapped_args(
            body=body,
            added_date=added_date,
            added_date_start=added_date_start,
            aspect_ratio_min=aspect_ratio_min,
            aspect_ratio_max=aspect_ratio_max,
            aspect_ratio=aspect_ratio,
            added_date_end=added_date_end,
            category=category,
            color=color,
            contributor=contributor,
            contributor_country=contributor_country,
            fields=fields,
            height=height,
            height_from=height_from,
            height_to=height_to,
            image_type=image_type,
            keyword_safe_search=keyword_safe_search,
            language=language,
            license=license,
            model=model,
            orientation=orientation,
            page=page,
            per_page=per_page,
            people_model_released=people_model_released,
            people_age=people_age,
            people_ethnicity=people_ethnicity,
            people_gender=people_gender,
            people_number=people_number,
            region=region,
            safe=safe,
            sort=sort,
            spellcheck_query=spellcheck_query,
            view=view,
            width=width,
            width_from=width_from,
            width_to=width_to,
        )
        return self._run_multiple_searches_oapg(
            body=args.body,
            query_params=args.query,
        )

