# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from shutterstock_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from shutterstock_python_sdk.api_response import AsyncGeneratorResponse
from shutterstock_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401

from shutterstock_python_sdk.model.language import Language as LanguageSchema
from shutterstock_python_sdk.model.sfx_search_results import SFXSearchResults as SFXSearchResultsSchema

from shutterstock_python_sdk.type.language import Language
from shutterstock_python_sdk.type.sfx_search_results import SFXSearchResults

from ...api_client import Dictionary
from shutterstock_python_sdk.pydantic.language import Language as LanguagePydantic
from shutterstock_python_sdk.pydantic.sfx_search_results import SFXSearchResults as SFXSearchResultsPydantic

# Query params
AddedDateSchema = schemas.DateSchema
AddedDateStartSchema = schemas.DateSchema
AddedDateEndSchema = schemas.DateSchema


class DurationSchema(
    schemas.IntSchema
):
    pass


class DurationFromSchema(
    schemas.IntSchema
):
    pass


class DurationToSchema(
    schemas.IntSchema
):
    pass


class PageSchema(
    schemas.IntSchema
):
    pass


class PerPageSchema(
    schemas.IntSchema
):
    pass


class QuerySchema(
    schemas.StrSchema
):
    pass
SafeSchema = schemas.BoolSchema


class SortSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def POPULAR(cls):
        return cls("popular")
    
    @schemas.classproperty
    def NEWEST(cls):
        return cls("newest")
    
    @schemas.classproperty
    def RELEVANCE(cls):
        return cls("relevance")
    
    @schemas.classproperty
    def RANDOM(cls):
        return cls("random")
    
    @schemas.classproperty
    def OLDEST(cls):
        return cls("oldest")


class ViewSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def MINIMAL(cls):
        return cls("minimal")
    
    @schemas.classproperty
    def FULL(cls):
        return cls("full")
LanguageSchema = LanguageSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'added_date': typing.Union[AddedDateSchema, str, date, ],
        'added_date_start': typing.Union[AddedDateStartSchema, str, date, ],
        'added_date_end': typing.Union[AddedDateEndSchema, str, date, ],
        'duration': typing.Union[DurationSchema, decimal.Decimal, int, ],
        'duration_from': typing.Union[DurationFromSchema, decimal.Decimal, int, ],
        'duration_to': typing.Union[DurationToSchema, decimal.Decimal, int, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'per_page': typing.Union[PerPageSchema, decimal.Decimal, int, ],
        'query': typing.Union[QuerySchema, str, ],
        'safe': typing.Union[SafeSchema, bool, ],
        'sort': typing.Union[SortSchema, str, ],
        'view': typing.Union[ViewSchema, str, ],
        'language': typing.Union[LanguageSchema, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_added_date = api_client.QueryParameter(
    name="added_date",
    style=api_client.ParameterStyle.FORM,
    schema=AddedDateSchema,
    explode=True,
)
request_query_added_date_start = api_client.QueryParameter(
    name="added_date_start",
    style=api_client.ParameterStyle.FORM,
    schema=AddedDateStartSchema,
    explode=True,
)
request_query_added_date_end = api_client.QueryParameter(
    name="added_date_end",
    style=api_client.ParameterStyle.FORM,
    schema=AddedDateEndSchema,
    explode=True,
)
request_query_duration = api_client.QueryParameter(
    name="duration",
    style=api_client.ParameterStyle.FORM,
    schema=DurationSchema,
    explode=True,
)
request_query_duration_from = api_client.QueryParameter(
    name="duration_from",
    style=api_client.ParameterStyle.FORM,
    schema=DurationFromSchema,
    explode=True,
)
request_query_duration_to = api_client.QueryParameter(
    name="duration_to",
    style=api_client.ParameterStyle.FORM,
    schema=DurationToSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_per_page = api_client.QueryParameter(
    name="per_page",
    style=api_client.ParameterStyle.FORM,
    schema=PerPageSchema,
    explode=True,
)
request_query_query = api_client.QueryParameter(
    name="query",
    style=api_client.ParameterStyle.FORM,
    schema=QuerySchema,
    explode=True,
)
request_query_safe = api_client.QueryParameter(
    name="safe",
    style=api_client.ParameterStyle.FORM,
    schema=SafeSchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="sort",
    style=api_client.ParameterStyle.FORM,
    schema=SortSchema,
    explode=True,
)
request_query_view = api_client.QueryParameter(
    name="view",
    style=api_client.ParameterStyle.FORM,
    schema=ViewSchema,
    explode=True,
)
request_query_language = api_client.QueryParameter(
    name="language",
    style=api_client.ParameterStyle.FORM,
    schema=LanguageSchema,
    explode=True,
)
SchemaFor200ResponseBodyApplicationJson = SFXSearchResultsSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: SFXSearchResults


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: SFXSearchResults


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)


@dataclass
class ApiResponseFor503(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor503Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_503 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor503,
    response_cls_async=ApiResponseFor503Async,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _search_sound_effects_mapped_args(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        query: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
        language: typing.Optional[Language] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if added_date is not None:
            _query_params["added_date"] = added_date
        if added_date_start is not None:
            _query_params["added_date_start"] = added_date_start
        if added_date_end is not None:
            _query_params["added_date_end"] = added_date_end
        if duration is not None:
            _query_params["duration"] = duration
        if duration_from is not None:
            _query_params["duration_from"] = duration_from
        if duration_to is not None:
            _query_params["duration_to"] = duration_to
        if page is not None:
            _query_params["page"] = page
        if per_page is not None:
            _query_params["per_page"] = per_page
        if query is not None:
            _query_params["query"] = query
        if safe is not None:
            _query_params["safe"] = safe
        if sort is not None:
            _query_params["sort"] = sort
        if view is not None:
            _query_params["view"] = view
        if language is not None:
            _query_params["language"] = language
        args.query = _query_params
        return args

    async def _asearch_sound_effects_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Search for sound effects
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_added_date,
            request_query_added_date_start,
            request_query_added_date_end,
            request_query_duration,
            request_query_duration_from,
            request_query_duration_to,
            request_query_page,
            request_query_per_page,
            request_query_query,
            request_query_safe,
            request_query_sort,
            request_query_view,
            request_query_language,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/sfx/search',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _search_sound_effects_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Search for sound effects
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_added_date,
            request_query_added_date_start,
            request_query_added_date_end,
            request_query_duration,
            request_query_duration_from,
            request_query_duration_to,
            request_query_page,
            request_query_per_page,
            request_query_query,
            request_query_safe,
            request_query_sort,
            request_query_view,
            request_query_language,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/sfx/search',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class SearchSoundEffectsRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def asearch_sound_effects(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        query: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
        language: typing.Optional[Language] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._search_sound_effects_mapped_args(
            added_date=added_date,
            added_date_start=added_date_start,
            added_date_end=added_date_end,
            duration=duration,
            duration_from=duration_from,
            duration_to=duration_to,
            page=page,
            per_page=per_page,
            query=query,
            safe=safe,
            sort=sort,
            view=view,
            language=language,
        )
        return await self._asearch_sound_effects_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def search_sound_effects(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        query: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
        language: typing.Optional[Language] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._search_sound_effects_mapped_args(
            added_date=added_date,
            added_date_start=added_date_start,
            added_date_end=added_date_end,
            duration=duration,
            duration_from=duration_from,
            duration_to=duration_to,
            page=page,
            per_page=per_page,
            query=query,
            safe=safe,
            sort=sort,
            view=view,
            language=language,
        )
        return self._search_sound_effects_oapg(
            query_params=args.query,
        )

class SearchSoundEffects(BaseApi):

    async def asearch_sound_effects(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        query: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
        language: typing.Optional[Language] = None,
        validate: bool = False,
        **kwargs,
    ) -> SFXSearchResultsPydantic:
        raw_response = await self.raw.asearch_sound_effects(
            added_date=added_date,
            added_date_start=added_date_start,
            added_date_end=added_date_end,
            duration=duration,
            duration_from=duration_from,
            duration_to=duration_to,
            page=page,
            per_page=per_page,
            query=query,
            safe=safe,
            sort=sort,
            view=view,
            language=language,
            **kwargs,
        )
        if validate:
            return SFXSearchResultsPydantic(**raw_response.body)
        return api_client.construct_model_instance(SFXSearchResultsPydantic, raw_response.body)
    
    
    def search_sound_effects(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        query: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
        language: typing.Optional[Language] = None,
        validate: bool = False,
    ) -> SFXSearchResultsPydantic:
        raw_response = self.raw.search_sound_effects(
            added_date=added_date,
            added_date_start=added_date_start,
            added_date_end=added_date_end,
            duration=duration,
            duration_from=duration_from,
            duration_to=duration_to,
            page=page,
            per_page=per_page,
            query=query,
            safe=safe,
            sort=sort,
            view=view,
            language=language,
        )
        if validate:
            return SFXSearchResultsPydantic(**raw_response.body)
        return api_client.construct_model_instance(SFXSearchResultsPydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        query: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
        language: typing.Optional[Language] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._search_sound_effects_mapped_args(
            added_date=added_date,
            added_date_start=added_date_start,
            added_date_end=added_date_end,
            duration=duration,
            duration_from=duration_from,
            duration_to=duration_to,
            page=page,
            per_page=per_page,
            query=query,
            safe=safe,
            sort=sort,
            view=view,
            language=language,
        )
        return await self._asearch_sound_effects_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        query: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
        language: typing.Optional[Language] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._search_sound_effects_mapped_args(
            added_date=added_date,
            added_date_start=added_date_start,
            added_date_end=added_date_end,
            duration=duration,
            duration_from=duration_from,
            duration_to=duration_to,
            page=page,
            per_page=per_page,
            query=query,
            safe=safe,
            sort=sort,
            view=view,
            language=language,
        )
        return self._search_sound_effects_oapg(
            query_params=args.query,
        )

