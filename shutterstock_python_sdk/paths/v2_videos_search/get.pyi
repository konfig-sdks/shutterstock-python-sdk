# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from shutterstock_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from shutterstock_python_sdk.api_response import AsyncGeneratorResponse
from shutterstock_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401

from shutterstock_python_sdk.model.video_search_results import VideoSearchResults as VideoSearchResultsSchema
from shutterstock_python_sdk.model.language import Language as LanguageSchema

from shutterstock_python_sdk.type.language import Language
from shutterstock_python_sdk.type.video_search_results import VideoSearchResults

from ...api_client import Dictionary
from shutterstock_python_sdk.pydantic.language import Language as LanguagePydantic
from shutterstock_python_sdk.pydantic.video_search_results import VideoSearchResults as VideoSearchResultsPydantic

# Query params
AddedDateSchema = schemas.DateSchema
AddedDateStartSchema = schemas.DateSchema
AddedDateEndSchema = schemas.DateSchema


class AspectRatioSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def POSITIVE_43(cls):
        return cls("43")
    
    @schemas.classproperty
    def POSITIVE_169(cls):
        return cls("169")
    
    @schemas.classproperty
    def NONSTANDARD(cls):
        return cls("nonstandard")
CategorySchema = schemas.StrSchema


class ContributorSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ContributorSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class ContributorCountrySchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ContributorCountrySchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
DurationSchema = schemas.IntSchema
DurationFromSchema = schemas.IntSchema
DurationToSchema = schemas.IntSchema
FpsSchema = schemas.NumberSchema
FpsFromSchema = schemas.NumberSchema
FpsToSchema = schemas.NumberSchema
KeywordSafeSearchSchema = schemas.BoolSchema
LanguageSchema = LanguageSchema


class LicenseSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def COMMERCIAL(cls):
                return cls("commercial")
            
            @schemas.classproperty
            def EDITORIAL(cls):
                return cls("editorial")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'LicenseSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class ModelSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ModelSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class PageSchema(
    schemas.IntSchema
):
    pass


class PerPageSchema(
    schemas.IntSchema
):
    pass


class PeopleAgeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def INFANTS(cls):
        return cls("infants")
    
    @schemas.classproperty
    def CHILDREN(cls):
        return cls("children")
    
    @schemas.classproperty
    def TEENAGERS(cls):
        return cls("teenagers")
    
    @schemas.classproperty
    def _20S(cls):
        return cls("20s")
    
    @schemas.classproperty
    def _30S(cls):
        return cls("30s")
    
    @schemas.classproperty
    def _40S(cls):
        return cls("40s")
    
    @schemas.classproperty
    def _50S(cls):
        return cls("50s")
    
    @schemas.classproperty
    def _60S(cls):
        return cls("60s")
    
    @schemas.classproperty
    def OLDER(cls):
        return cls("older")


class PeopleEthnicitySchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def AFRICAN(cls):
                return cls("african")
            
            @schemas.classproperty
            def AFRICAN_AMERICAN(cls):
                return cls("african_american")
            
            @schemas.classproperty
            def BLACK(cls):
                return cls("black")
            
            @schemas.classproperty
            def BRAZILIAN(cls):
                return cls("brazilian")
            
            @schemas.classproperty
            def CHINESE(cls):
                return cls("chinese")
            
            @schemas.classproperty
            def CAUCASIAN(cls):
                return cls("caucasian")
            
            @schemas.classproperty
            def EAST_ASIAN(cls):
                return cls("east_asian")
            
            @schemas.classproperty
            def HISPANIC(cls):
                return cls("hispanic")
            
            @schemas.classproperty
            def JAPANESE(cls):
                return cls("japanese")
            
            @schemas.classproperty
            def MIDDLE_EASTERN(cls):
                return cls("middle_eastern")
            
            @schemas.classproperty
            def NATIVE_AMERICAN(cls):
                return cls("native_american")
            
            @schemas.classproperty
            def PACIFIC_ISLANDER(cls):
                return cls("pacific_islander")
            
            @schemas.classproperty
            def SOUTH_ASIAN(cls):
                return cls("south_asian")
            
            @schemas.classproperty
            def SOUTHEAST_ASIAN(cls):
                return cls("southeast_asian")
            
            @schemas.classproperty
            def OTHER(cls):
                return cls("other")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PeopleEthnicitySchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class PeopleGenderSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def MALE(cls):
        return cls("male")
    
    @schemas.classproperty
    def FEMALE(cls):
        return cls("female")
    
    @schemas.classproperty
    def BOTH(cls):
        return cls("both")


class PeopleNumberSchema(
    schemas.IntSchema
):
    pass
PeopleModelReleasedSchema = schemas.BoolSchema
QuerySchema = schemas.StrSchema


class ResolutionSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def _4K(cls):
        return cls("4k")
    
    @schemas.classproperty
    def STANDARD_DEFINITION(cls):
        return cls("standard_definition")
    
    @schemas.classproperty
    def HIGH_DEFINITION(cls):
        return cls("high_definition")
SafeSchema = schemas.BoolSchema


class SortSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def NEWEST(cls):
        return cls("newest")
    
    @schemas.classproperty
    def POPULAR(cls):
        return cls("popular")
    
    @schemas.classproperty
    def RELEVANCE(cls):
        return cls("relevance")
    
    @schemas.classproperty
    def RANDOM(cls):
        return cls("random")


class ViewSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def MINIMAL(cls):
        return cls("minimal")
    
    @schemas.classproperty
    def FULL(cls):
        return cls("full")
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'added_date': typing.Union[AddedDateSchema, str, date, ],
        'added_date_start': typing.Union[AddedDateStartSchema, str, date, ],
        'added_date_end': typing.Union[AddedDateEndSchema, str, date, ],
        'aspect_ratio': typing.Union[AspectRatioSchema, str, ],
        'category': typing.Union[CategorySchema, str, ],
        'contributor': typing.Union[ContributorSchema, list, tuple, ],
        'contributor_country': typing.Union[ContributorCountrySchema, list, tuple, ],
        'duration': typing.Union[DurationSchema, decimal.Decimal, int, ],
        'duration_from': typing.Union[DurationFromSchema, decimal.Decimal, int, ],
        'duration_to': typing.Union[DurationToSchema, decimal.Decimal, int, ],
        'fps': typing.Union[FpsSchema, decimal.Decimal, int, float, ],
        'fps_from': typing.Union[FpsFromSchema, decimal.Decimal, int, float, ],
        'fps_to': typing.Union[FpsToSchema, decimal.Decimal, int, float, ],
        'keyword_safe_search': typing.Union[KeywordSafeSearchSchema, bool, ],
        'language': typing.Union[LanguageSchema, ],
        'license': typing.Union[LicenseSchema, list, tuple, ],
        'model': typing.Union[ModelSchema, list, tuple, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'per_page': typing.Union[PerPageSchema, decimal.Decimal, int, ],
        'people_age': typing.Union[PeopleAgeSchema, str, ],
        'people_ethnicity': typing.Union[PeopleEthnicitySchema, list, tuple, ],
        'people_gender': typing.Union[PeopleGenderSchema, str, ],
        'people_number': typing.Union[PeopleNumberSchema, decimal.Decimal, int, ],
        'people_model_released': typing.Union[PeopleModelReleasedSchema, bool, ],
        'query': typing.Union[QuerySchema, str, ],
        'resolution': typing.Union[ResolutionSchema, str, ],
        'safe': typing.Union[SafeSchema, bool, ],
        'sort': typing.Union[SortSchema, str, ],
        'view': typing.Union[ViewSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_added_date = api_client.QueryParameter(
    name="added_date",
    style=api_client.ParameterStyle.FORM,
    schema=AddedDateSchema,
    explode=True,
)
request_query_added_date_start = api_client.QueryParameter(
    name="added_date_start",
    style=api_client.ParameterStyle.FORM,
    schema=AddedDateStartSchema,
    explode=True,
)
request_query_added_date_end = api_client.QueryParameter(
    name="added_date_end",
    style=api_client.ParameterStyle.FORM,
    schema=AddedDateEndSchema,
    explode=True,
)
request_query_aspect_ratio = api_client.QueryParameter(
    name="aspect_ratio",
    style=api_client.ParameterStyle.FORM,
    schema=AspectRatioSchema,
    explode=True,
)
request_query_category = api_client.QueryParameter(
    name="category",
    style=api_client.ParameterStyle.FORM,
    schema=CategorySchema,
    explode=True,
)
request_query_contributor = api_client.QueryParameter(
    name="contributor",
    style=api_client.ParameterStyle.FORM,
    schema=ContributorSchema,
    explode=True,
)
request_query_contributor_country = api_client.QueryParameter(
    name="contributor_country",
    style=api_client.ParameterStyle.FORM,
    schema=ContributorCountrySchema,
    explode=True,
)
request_query_duration = api_client.QueryParameter(
    name="duration",
    style=api_client.ParameterStyle.FORM,
    schema=DurationSchema,
    explode=True,
)
request_query_duration_from = api_client.QueryParameter(
    name="duration_from",
    style=api_client.ParameterStyle.FORM,
    schema=DurationFromSchema,
    explode=True,
)
request_query_duration_to = api_client.QueryParameter(
    name="duration_to",
    style=api_client.ParameterStyle.FORM,
    schema=DurationToSchema,
    explode=True,
)
request_query_fps = api_client.QueryParameter(
    name="fps",
    style=api_client.ParameterStyle.FORM,
    schema=FpsSchema,
    explode=True,
)
request_query_fps_from = api_client.QueryParameter(
    name="fps_from",
    style=api_client.ParameterStyle.FORM,
    schema=FpsFromSchema,
    explode=True,
)
request_query_fps_to = api_client.QueryParameter(
    name="fps_to",
    style=api_client.ParameterStyle.FORM,
    schema=FpsToSchema,
    explode=True,
)
request_query_keyword_safe_search = api_client.QueryParameter(
    name="keyword_safe_search",
    style=api_client.ParameterStyle.FORM,
    schema=KeywordSafeSearchSchema,
    explode=True,
)
request_query_language = api_client.QueryParameter(
    name="language",
    style=api_client.ParameterStyle.FORM,
    schema=Language,
    explode=True,
)
request_query_license = api_client.QueryParameter(
    name="license",
    style=api_client.ParameterStyle.FORM,
    schema=LicenseSchema,
    explode=True,
)
request_query_model = api_client.QueryParameter(
    name="model",
    style=api_client.ParameterStyle.FORM,
    schema=ModelSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_per_page = api_client.QueryParameter(
    name="per_page",
    style=api_client.ParameterStyle.FORM,
    schema=PerPageSchema,
    explode=True,
)
request_query_people_age = api_client.QueryParameter(
    name="people_age",
    style=api_client.ParameterStyle.FORM,
    schema=PeopleAgeSchema,
    explode=True,
)
request_query_people_ethnicity = api_client.QueryParameter(
    name="people_ethnicity",
    style=api_client.ParameterStyle.FORM,
    schema=PeopleEthnicitySchema,
    explode=True,
)
request_query_people_gender = api_client.QueryParameter(
    name="people_gender",
    style=api_client.ParameterStyle.FORM,
    schema=PeopleGenderSchema,
    explode=True,
)
request_query_people_number = api_client.QueryParameter(
    name="people_number",
    style=api_client.ParameterStyle.FORM,
    schema=PeopleNumberSchema,
    explode=True,
)
request_query_people_model_released = api_client.QueryParameter(
    name="people_model_released",
    style=api_client.ParameterStyle.FORM,
    schema=PeopleModelReleasedSchema,
    explode=True,
)
request_query_query = api_client.QueryParameter(
    name="query",
    style=api_client.ParameterStyle.FORM,
    schema=QuerySchema,
    explode=True,
)
request_query_resolution = api_client.QueryParameter(
    name="resolution",
    style=api_client.ParameterStyle.FORM,
    schema=ResolutionSchema,
    explode=True,
)
request_query_safe = api_client.QueryParameter(
    name="safe",
    style=api_client.ParameterStyle.FORM,
    schema=SafeSchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="sort",
    style=api_client.ParameterStyle.FORM,
    schema=SortSchema,
    explode=True,
)
request_query_view = api_client.QueryParameter(
    name="view",
    style=api_client.ParameterStyle.FORM,
    schema=ViewSchema,
    explode=True,
)
SchemaFor200ResponseBodyApplicationJson = VideoSearchResultsSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: VideoSearchResults


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: VideoSearchResults


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _search_video_mapped_args(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        aspect_ratio: typing.Optional[str] = None,
        category: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.List[str]] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        fps: typing.Optional[typing.Union[int, float]] = None,
        fps_from: typing.Optional[typing.Union[int, float]] = None,
        fps_to: typing.Optional[typing.Union[int, float]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        query: typing.Optional[str] = None,
        resolution: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if added_date is not None:
            _query_params["added_date"] = added_date
        if added_date_start is not None:
            _query_params["added_date_start"] = added_date_start
        if added_date_end is not None:
            _query_params["added_date_end"] = added_date_end
        if aspect_ratio is not None:
            _query_params["aspect_ratio"] = aspect_ratio
        if category is not None:
            _query_params["category"] = category
        if contributor is not None:
            _query_params["contributor"] = contributor
        if contributor_country is not None:
            _query_params["contributor_country"] = contributor_country
        if duration is not None:
            _query_params["duration"] = duration
        if duration_from is not None:
            _query_params["duration_from"] = duration_from
        if duration_to is not None:
            _query_params["duration_to"] = duration_to
        if fps is not None:
            _query_params["fps"] = fps
        if fps_from is not None:
            _query_params["fps_from"] = fps_from
        if fps_to is not None:
            _query_params["fps_to"] = fps_to
        if keyword_safe_search is not None:
            _query_params["keyword_safe_search"] = keyword_safe_search
        if language is not None:
            _query_params["language"] = language
        if license is not None:
            _query_params["license"] = license
        if model is not None:
            _query_params["model"] = model
        if page is not None:
            _query_params["page"] = page
        if per_page is not None:
            _query_params["per_page"] = per_page
        if people_age is not None:
            _query_params["people_age"] = people_age
        if people_ethnicity is not None:
            _query_params["people_ethnicity"] = people_ethnicity
        if people_gender is not None:
            _query_params["people_gender"] = people_gender
        if people_number is not None:
            _query_params["people_number"] = people_number
        if people_model_released is not None:
            _query_params["people_model_released"] = people_model_released
        if query is not None:
            _query_params["query"] = query
        if resolution is not None:
            _query_params["resolution"] = resolution
        if safe is not None:
            _query_params["safe"] = safe
        if sort is not None:
            _query_params["sort"] = sort
        if view is not None:
            _query_params["view"] = view
        args.query = _query_params
        return args

    async def _asearch_video_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Search for videos
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_added_date,
            request_query_added_date_start,
            request_query_added_date_end,
            request_query_aspect_ratio,
            request_query_category,
            request_query_contributor,
            request_query_contributor_country,
            request_query_duration,
            request_query_duration_from,
            request_query_duration_to,
            request_query_fps,
            request_query_fps_from,
            request_query_fps_to,
            request_query_keyword_safe_search,
            request_query_language,
            request_query_license,
            request_query_model,
            request_query_page,
            request_query_per_page,
            request_query_people_age,
            request_query_people_ethnicity,
            request_query_people_gender,
            request_query_people_number,
            request_query_people_model_released,
            request_query_query,
            request_query_resolution,
            request_query_safe,
            request_query_sort,
            request_query_view,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/videos/search',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _search_video_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Search for videos
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_added_date,
            request_query_added_date_start,
            request_query_added_date_end,
            request_query_aspect_ratio,
            request_query_category,
            request_query_contributor,
            request_query_contributor_country,
            request_query_duration,
            request_query_duration_from,
            request_query_duration_to,
            request_query_fps,
            request_query_fps_from,
            request_query_fps_to,
            request_query_keyword_safe_search,
            request_query_language,
            request_query_license,
            request_query_model,
            request_query_page,
            request_query_per_page,
            request_query_people_age,
            request_query_people_ethnicity,
            request_query_people_gender,
            request_query_people_number,
            request_query_people_model_released,
            request_query_query,
            request_query_resolution,
            request_query_safe,
            request_query_sort,
            request_query_view,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/videos/search',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class SearchVideoRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def asearch_video(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        aspect_ratio: typing.Optional[str] = None,
        category: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.List[str]] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        fps: typing.Optional[typing.Union[int, float]] = None,
        fps_from: typing.Optional[typing.Union[int, float]] = None,
        fps_to: typing.Optional[typing.Union[int, float]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        query: typing.Optional[str] = None,
        resolution: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._search_video_mapped_args(
            added_date=added_date,
            added_date_start=added_date_start,
            added_date_end=added_date_end,
            aspect_ratio=aspect_ratio,
            category=category,
            contributor=contributor,
            contributor_country=contributor_country,
            duration=duration,
            duration_from=duration_from,
            duration_to=duration_to,
            fps=fps,
            fps_from=fps_from,
            fps_to=fps_to,
            keyword_safe_search=keyword_safe_search,
            language=language,
            license=license,
            model=model,
            page=page,
            per_page=per_page,
            people_age=people_age,
            people_ethnicity=people_ethnicity,
            people_gender=people_gender,
            people_number=people_number,
            people_model_released=people_model_released,
            query=query,
            resolution=resolution,
            safe=safe,
            sort=sort,
            view=view,
        )
        return await self._asearch_video_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def search_video(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        aspect_ratio: typing.Optional[str] = None,
        category: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.List[str]] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        fps: typing.Optional[typing.Union[int, float]] = None,
        fps_from: typing.Optional[typing.Union[int, float]] = None,
        fps_to: typing.Optional[typing.Union[int, float]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        query: typing.Optional[str] = None,
        resolution: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._search_video_mapped_args(
            added_date=added_date,
            added_date_start=added_date_start,
            added_date_end=added_date_end,
            aspect_ratio=aspect_ratio,
            category=category,
            contributor=contributor,
            contributor_country=contributor_country,
            duration=duration,
            duration_from=duration_from,
            duration_to=duration_to,
            fps=fps,
            fps_from=fps_from,
            fps_to=fps_to,
            keyword_safe_search=keyword_safe_search,
            language=language,
            license=license,
            model=model,
            page=page,
            per_page=per_page,
            people_age=people_age,
            people_ethnicity=people_ethnicity,
            people_gender=people_gender,
            people_number=people_number,
            people_model_released=people_model_released,
            query=query,
            resolution=resolution,
            safe=safe,
            sort=sort,
            view=view,
        )
        return self._search_video_oapg(
            query_params=args.query,
        )

class SearchVideo(BaseApi):

    async def asearch_video(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        aspect_ratio: typing.Optional[str] = None,
        category: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.List[str]] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        fps: typing.Optional[typing.Union[int, float]] = None,
        fps_from: typing.Optional[typing.Union[int, float]] = None,
        fps_to: typing.Optional[typing.Union[int, float]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        query: typing.Optional[str] = None,
        resolution: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> VideoSearchResultsPydantic:
        raw_response = await self.raw.asearch_video(
            added_date=added_date,
            added_date_start=added_date_start,
            added_date_end=added_date_end,
            aspect_ratio=aspect_ratio,
            category=category,
            contributor=contributor,
            contributor_country=contributor_country,
            duration=duration,
            duration_from=duration_from,
            duration_to=duration_to,
            fps=fps,
            fps_from=fps_from,
            fps_to=fps_to,
            keyword_safe_search=keyword_safe_search,
            language=language,
            license=license,
            model=model,
            page=page,
            per_page=per_page,
            people_age=people_age,
            people_ethnicity=people_ethnicity,
            people_gender=people_gender,
            people_number=people_number,
            people_model_released=people_model_released,
            query=query,
            resolution=resolution,
            safe=safe,
            sort=sort,
            view=view,
            **kwargs,
        )
        if validate:
            return VideoSearchResultsPydantic(**raw_response.body)
        return api_client.construct_model_instance(VideoSearchResultsPydantic, raw_response.body)
    
    
    def search_video(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        aspect_ratio: typing.Optional[str] = None,
        category: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.List[str]] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        fps: typing.Optional[typing.Union[int, float]] = None,
        fps_from: typing.Optional[typing.Union[int, float]] = None,
        fps_to: typing.Optional[typing.Union[int, float]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        query: typing.Optional[str] = None,
        resolution: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
        validate: bool = False,
    ) -> VideoSearchResultsPydantic:
        raw_response = self.raw.search_video(
            added_date=added_date,
            added_date_start=added_date_start,
            added_date_end=added_date_end,
            aspect_ratio=aspect_ratio,
            category=category,
            contributor=contributor,
            contributor_country=contributor_country,
            duration=duration,
            duration_from=duration_from,
            duration_to=duration_to,
            fps=fps,
            fps_from=fps_from,
            fps_to=fps_to,
            keyword_safe_search=keyword_safe_search,
            language=language,
            license=license,
            model=model,
            page=page,
            per_page=per_page,
            people_age=people_age,
            people_ethnicity=people_ethnicity,
            people_gender=people_gender,
            people_number=people_number,
            people_model_released=people_model_released,
            query=query,
            resolution=resolution,
            safe=safe,
            sort=sort,
            view=view,
        )
        if validate:
            return VideoSearchResultsPydantic(**raw_response.body)
        return api_client.construct_model_instance(VideoSearchResultsPydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        aspect_ratio: typing.Optional[str] = None,
        category: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.List[str]] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        fps: typing.Optional[typing.Union[int, float]] = None,
        fps_from: typing.Optional[typing.Union[int, float]] = None,
        fps_to: typing.Optional[typing.Union[int, float]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        query: typing.Optional[str] = None,
        resolution: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._search_video_mapped_args(
            added_date=added_date,
            added_date_start=added_date_start,
            added_date_end=added_date_end,
            aspect_ratio=aspect_ratio,
            category=category,
            contributor=contributor,
            contributor_country=contributor_country,
            duration=duration,
            duration_from=duration_from,
            duration_to=duration_to,
            fps=fps,
            fps_from=fps_from,
            fps_to=fps_to,
            keyword_safe_search=keyword_safe_search,
            language=language,
            license=license,
            model=model,
            page=page,
            per_page=per_page,
            people_age=people_age,
            people_ethnicity=people_ethnicity,
            people_gender=people_gender,
            people_number=people_number,
            people_model_released=people_model_released,
            query=query,
            resolution=resolution,
            safe=safe,
            sort=sort,
            view=view,
        )
        return await self._asearch_video_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        added_date: typing.Optional[date] = None,
        added_date_start: typing.Optional[date] = None,
        added_date_end: typing.Optional[date] = None,
        aspect_ratio: typing.Optional[str] = None,
        category: typing.Optional[str] = None,
        contributor: typing.Optional[typing.List[str]] = None,
        contributor_country: typing.Optional[typing.List[str]] = None,
        duration: typing.Optional[int] = None,
        duration_from: typing.Optional[int] = None,
        duration_to: typing.Optional[int] = None,
        fps: typing.Optional[typing.Union[int, float]] = None,
        fps_from: typing.Optional[typing.Union[int, float]] = None,
        fps_to: typing.Optional[typing.Union[int, float]] = None,
        keyword_safe_search: typing.Optional[bool] = None,
        language: typing.Optional[Language] = None,
        license: typing.Optional[typing.List[str]] = None,
        model: typing.Optional[typing.List[str]] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        people_age: typing.Optional[str] = None,
        people_ethnicity: typing.Optional[typing.List[str]] = None,
        people_gender: typing.Optional[str] = None,
        people_number: typing.Optional[int] = None,
        people_model_released: typing.Optional[bool] = None,
        query: typing.Optional[str] = None,
        resolution: typing.Optional[str] = None,
        safe: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        view: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._search_video_mapped_args(
            added_date=added_date,
            added_date_start=added_date_start,
            added_date_end=added_date_end,
            aspect_ratio=aspect_ratio,
            category=category,
            contributor=contributor,
            contributor_country=contributor_country,
            duration=duration,
            duration_from=duration_from,
            duration_to=duration_to,
            fps=fps,
            fps_from=fps_from,
            fps_to=fps_to,
            keyword_safe_search=keyword_safe_search,
            language=language,
            license=license,
            model=model,
            page=page,
            per_page=per_page,
            people_age=people_age,
            people_ethnicity=people_ethnicity,
            people_gender=people_gender,
            people_number=people_number,
            people_model_released=people_model_released,
            query=query,
            resolution=resolution,
            safe=safe,
            sort=sort,
            view=view,
        )
        return self._search_video_oapg(
            query_params=args.query,
        )

