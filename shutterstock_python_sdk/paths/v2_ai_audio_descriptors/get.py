# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from shutterstock_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from shutterstock_python_sdk.api_response import AsyncGeneratorResponse
from shutterstock_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401

from shutterstock_python_sdk.model.descriptors_list_result import DescriptorsListResult as DescriptorsListResultSchema

from shutterstock_python_sdk.type.descriptors_list_result import DescriptorsListResult

from ...api_client import Dictionary
from shutterstock_python_sdk.pydantic.descriptors_list_result import DescriptorsListResult as DescriptorsListResultPydantic

from . import path

# Query params
RenderSpeedOverSchema = schemas.NumberSchema
BandIdSchema = schemas.StrSchema
BandNameSchema = schemas.StrSchema


class PageSchema(
    schemas.IntSchema
):


    class MetaOapg:
        inclusive_minimum = 1


class PerPageSchema(
    schemas.IntSchema
):


    class MetaOapg:
        inclusive_maximum = 100
        inclusive_minimum = 1


class IdSchema(
    schemas.ListSchema
):


    class MetaOapg:
        max_items = 20
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IdSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
InstrumentNameSchema = schemas.StrSchema
InstrumentIdSchema = schemas.StrSchema
TempoSchema = schemas.NumberSchema
TempoToSchema = schemas.NumberSchema
TempoFromSchema = schemas.NumberSchema
NameSchema = schemas.StrSchema
TagSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'render_speed_over': typing.Union[RenderSpeedOverSchema, decimal.Decimal, int, float, ],
        'band_id': typing.Union[BandIdSchema, str, ],
        'band_name': typing.Union[BandNameSchema, str, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'per_page': typing.Union[PerPageSchema, decimal.Decimal, int, ],
        'id': typing.Union[IdSchema, list, tuple, ],
        'instrument_name': typing.Union[InstrumentNameSchema, str, ],
        'instrument_id': typing.Union[InstrumentIdSchema, str, ],
        'tempo': typing.Union[TempoSchema, decimal.Decimal, int, float, ],
        'tempo_to': typing.Union[TempoToSchema, decimal.Decimal, int, float, ],
        'tempo_from': typing.Union[TempoFromSchema, decimal.Decimal, int, float, ],
        'name': typing.Union[NameSchema, str, ],
        'tag': typing.Union[TagSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_render_speed_over = api_client.QueryParameter(
    name="render_speed_over",
    style=api_client.ParameterStyle.FORM,
    schema=RenderSpeedOverSchema,
    explode=True,
)
request_query_band_id = api_client.QueryParameter(
    name="band_id",
    style=api_client.ParameterStyle.FORM,
    schema=BandIdSchema,
    explode=True,
)
request_query_band_name = api_client.QueryParameter(
    name="band_name",
    style=api_client.ParameterStyle.FORM,
    schema=BandNameSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_per_page = api_client.QueryParameter(
    name="per_page",
    style=api_client.ParameterStyle.FORM,
    schema=PerPageSchema,
    explode=True,
)
request_query_id = api_client.QueryParameter(
    name="id",
    style=api_client.ParameterStyle.FORM,
    schema=IdSchema,
    explode=True,
)
request_query_instrument_name = api_client.QueryParameter(
    name="instrument_name",
    style=api_client.ParameterStyle.FORM,
    schema=InstrumentNameSchema,
    explode=True,
)
request_query_instrument_id = api_client.QueryParameter(
    name="instrument_id",
    style=api_client.ParameterStyle.FORM,
    schema=InstrumentIdSchema,
    explode=True,
)
request_query_tempo = api_client.QueryParameter(
    name="tempo",
    style=api_client.ParameterStyle.FORM,
    schema=TempoSchema,
    explode=True,
)
request_query_tempo_to = api_client.QueryParameter(
    name="tempo_to",
    style=api_client.ParameterStyle.FORM,
    schema=TempoToSchema,
    explode=True,
)
request_query_tempo_from = api_client.QueryParameter(
    name="tempo_from",
    style=api_client.ParameterStyle.FORM,
    schema=TempoFromSchema,
    explode=True,
)
request_query_name = api_client.QueryParameter(
    name="name",
    style=api_client.ParameterStyle.FORM,
    schema=NameSchema,
    explode=True,
)
request_query_tag = api_client.QueryParameter(
    name="tag",
    style=api_client.ParameterStyle.FORM,
    schema=TagSchema,
    explode=True,
)
_auth = [
    'basic',
    'customer_accessCode',
]
SchemaFor200ResponseBodyApplicationJson = DescriptorsListResultSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: DescriptorsListResult


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: DescriptorsListResult


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '403': _response_for_403,
    '404': _response_for_404,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _list_audio_descriptors_mapped_args(
        self,
        render_speed_over: typing.Optional[typing.Union[int, float]] = None,
        band_id: typing.Optional[str] = None,
        band_name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        id: typing.Optional[typing.List[str]] = None,
        instrument_name: typing.Optional[str] = None,
        instrument_id: typing.Optional[str] = None,
        tempo: typing.Optional[typing.Union[int, float]] = None,
        tempo_to: typing.Optional[typing.Union[int, float]] = None,
        tempo_from: typing.Optional[typing.Union[int, float]] = None,
        name: typing.Optional[str] = None,
        tag: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if render_speed_over is not None:
            _query_params["render_speed_over"] = render_speed_over
        if band_id is not None:
            _query_params["band_id"] = band_id
        if band_name is not None:
            _query_params["band_name"] = band_name
        if page is not None:
            _query_params["page"] = page
        if per_page is not None:
            _query_params["per_page"] = per_page
        if id is not None:
            _query_params["id"] = id
        if instrument_name is not None:
            _query_params["instrument_name"] = instrument_name
        if instrument_id is not None:
            _query_params["instrument_id"] = instrument_id
        if tempo is not None:
            _query_params["tempo"] = tempo
        if tempo_to is not None:
            _query_params["tempo_to"] = tempo_to
        if tempo_from is not None:
            _query_params["tempo_from"] = tempo_from
        if name is not None:
            _query_params["name"] = name
        if tag is not None:
            _query_params["tag"] = tag
        args.query = _query_params
        return args

    async def _alist_audio_descriptors_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        List computer audio descriptors
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_render_speed_over,
            request_query_band_id,
            request_query_band_name,
            request_query_page,
            request_query_per_page,
            request_query_id,
            request_query_instrument_name,
            request_query_instrument_id,
            request_query_tempo,
            request_query_tempo_to,
            request_query_tempo_from,
            request_query_name,
            request_query_tag,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/ai/audio/descriptors',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _list_audio_descriptors_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        List computer audio descriptors
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_render_speed_over,
            request_query_band_id,
            request_query_band_name,
            request_query_page,
            request_query_per_page,
            request_query_id,
            request_query_instrument_name,
            request_query_instrument_id,
            request_query_tempo,
            request_query_tempo_to,
            request_query_tempo_from,
            request_query_name,
            request_query_tag,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/ai/audio/descriptors',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ListAudioDescriptorsRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alist_audio_descriptors(
        self,
        render_speed_over: typing.Optional[typing.Union[int, float]] = None,
        band_id: typing.Optional[str] = None,
        band_name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        id: typing.Optional[typing.List[str]] = None,
        instrument_name: typing.Optional[str] = None,
        instrument_id: typing.Optional[str] = None,
        tempo: typing.Optional[typing.Union[int, float]] = None,
        tempo_to: typing.Optional[typing.Union[int, float]] = None,
        tempo_from: typing.Optional[typing.Union[int, float]] = None,
        name: typing.Optional[str] = None,
        tag: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_audio_descriptors_mapped_args(
            render_speed_over=render_speed_over,
            band_id=band_id,
            band_name=band_name,
            page=page,
            per_page=per_page,
            id=id,
            instrument_name=instrument_name,
            instrument_id=instrument_id,
            tempo=tempo,
            tempo_to=tempo_to,
            tempo_from=tempo_from,
            name=name,
            tag=tag,
        )
        return await self._alist_audio_descriptors_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def list_audio_descriptors(
        self,
        render_speed_over: typing.Optional[typing.Union[int, float]] = None,
        band_id: typing.Optional[str] = None,
        band_name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        id: typing.Optional[typing.List[str]] = None,
        instrument_name: typing.Optional[str] = None,
        instrument_id: typing.Optional[str] = None,
        tempo: typing.Optional[typing.Union[int, float]] = None,
        tempo_to: typing.Optional[typing.Union[int, float]] = None,
        tempo_from: typing.Optional[typing.Union[int, float]] = None,
        name: typing.Optional[str] = None,
        tag: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_audio_descriptors_mapped_args(
            render_speed_over=render_speed_over,
            band_id=band_id,
            band_name=band_name,
            page=page,
            per_page=per_page,
            id=id,
            instrument_name=instrument_name,
            instrument_id=instrument_id,
            tempo=tempo,
            tempo_to=tempo_to,
            tempo_from=tempo_from,
            name=name,
            tag=tag,
        )
        return self._list_audio_descriptors_oapg(
            query_params=args.query,
        )

class ListAudioDescriptors(BaseApi):

    async def alist_audio_descriptors(
        self,
        render_speed_over: typing.Optional[typing.Union[int, float]] = None,
        band_id: typing.Optional[str] = None,
        band_name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        id: typing.Optional[typing.List[str]] = None,
        instrument_name: typing.Optional[str] = None,
        instrument_id: typing.Optional[str] = None,
        tempo: typing.Optional[typing.Union[int, float]] = None,
        tempo_to: typing.Optional[typing.Union[int, float]] = None,
        tempo_from: typing.Optional[typing.Union[int, float]] = None,
        name: typing.Optional[str] = None,
        tag: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> DescriptorsListResultPydantic:
        raw_response = await self.raw.alist_audio_descriptors(
            render_speed_over=render_speed_over,
            band_id=band_id,
            band_name=band_name,
            page=page,
            per_page=per_page,
            id=id,
            instrument_name=instrument_name,
            instrument_id=instrument_id,
            tempo=tempo,
            tempo_to=tempo_to,
            tempo_from=tempo_from,
            name=name,
            tag=tag,
            **kwargs,
        )
        if validate:
            return DescriptorsListResultPydantic(**raw_response.body)
        return api_client.construct_model_instance(DescriptorsListResultPydantic, raw_response.body)
    
    
    def list_audio_descriptors(
        self,
        render_speed_over: typing.Optional[typing.Union[int, float]] = None,
        band_id: typing.Optional[str] = None,
        band_name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        id: typing.Optional[typing.List[str]] = None,
        instrument_name: typing.Optional[str] = None,
        instrument_id: typing.Optional[str] = None,
        tempo: typing.Optional[typing.Union[int, float]] = None,
        tempo_to: typing.Optional[typing.Union[int, float]] = None,
        tempo_from: typing.Optional[typing.Union[int, float]] = None,
        name: typing.Optional[str] = None,
        tag: typing.Optional[str] = None,
        validate: bool = False,
    ) -> DescriptorsListResultPydantic:
        raw_response = self.raw.list_audio_descriptors(
            render_speed_over=render_speed_over,
            band_id=band_id,
            band_name=band_name,
            page=page,
            per_page=per_page,
            id=id,
            instrument_name=instrument_name,
            instrument_id=instrument_id,
            tempo=tempo,
            tempo_to=tempo_to,
            tempo_from=tempo_from,
            name=name,
            tag=tag,
        )
        if validate:
            return DescriptorsListResultPydantic(**raw_response.body)
        return api_client.construct_model_instance(DescriptorsListResultPydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        render_speed_over: typing.Optional[typing.Union[int, float]] = None,
        band_id: typing.Optional[str] = None,
        band_name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        id: typing.Optional[typing.List[str]] = None,
        instrument_name: typing.Optional[str] = None,
        instrument_id: typing.Optional[str] = None,
        tempo: typing.Optional[typing.Union[int, float]] = None,
        tempo_to: typing.Optional[typing.Union[int, float]] = None,
        tempo_from: typing.Optional[typing.Union[int, float]] = None,
        name: typing.Optional[str] = None,
        tag: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_audio_descriptors_mapped_args(
            render_speed_over=render_speed_over,
            band_id=band_id,
            band_name=band_name,
            page=page,
            per_page=per_page,
            id=id,
            instrument_name=instrument_name,
            instrument_id=instrument_id,
            tempo=tempo,
            tempo_to=tempo_to,
            tempo_from=tempo_from,
            name=name,
            tag=tag,
        )
        return await self._alist_audio_descriptors_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        render_speed_over: typing.Optional[typing.Union[int, float]] = None,
        band_id: typing.Optional[str] = None,
        band_name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        id: typing.Optional[typing.List[str]] = None,
        instrument_name: typing.Optional[str] = None,
        instrument_id: typing.Optional[str] = None,
        tempo: typing.Optional[typing.Union[int, float]] = None,
        tempo_to: typing.Optional[typing.Union[int, float]] = None,
        tempo_from: typing.Optional[typing.Union[int, float]] = None,
        name: typing.Optional[str] = None,
        tag: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_audio_descriptors_mapped_args(
            render_speed_over=render_speed_over,
            band_id=band_id,
            band_name=band_name,
            page=page,
            per_page=per_page,
            id=id,
            instrument_name=instrument_name,
            instrument_id=instrument_id,
            tempo=tempo,
            tempo_to=tempo_to,
            tempo_from=tempo_from,
            name=name,
            tag=tag,
        )
        return self._list_audio_descriptors_oapg(
            query_params=args.query,
        )

