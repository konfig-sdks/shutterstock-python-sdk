# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from shutterstock_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from shutterstock_python_sdk.api_response import AsyncGeneratorResponse
from shutterstock_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401

from shutterstock_python_sdk.model.license_audio_result_data_list import LicenseAudioResultDataList as LicenseAudioResultDataListSchema
from shutterstock_python_sdk.model.license_audio import LicenseAudio as LicenseAudioSchema
from shutterstock_python_sdk.model.license_audio_request import LicenseAudioRequest as LicenseAudioRequestSchema

from shutterstock_python_sdk.type.license_audio import LicenseAudio
from shutterstock_python_sdk.type.license_audio_result_data_list import LicenseAudioResultDataList
from shutterstock_python_sdk.type.license_audio_request import LicenseAudioRequest

from ...api_client import Dictionary
from shutterstock_python_sdk.pydantic.license_audio_request import LicenseAudioRequest as LicenseAudioRequestPydantic
from shutterstock_python_sdk.pydantic.license_audio_result_data_list import LicenseAudioResultDataList as LicenseAudioResultDataListPydantic
from shutterstock_python_sdk.pydantic.license_audio import LicenseAudio as LicenseAudioPydantic

from . import path

# Query params


class LicenseSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "audio_platform": "AUDIO_PLATFORM",
            "premier_music_basic": "PREMIER_MUSIC_BASIC",
            "premier_music_extended": "PREMIER_MUSIC_EXTENDED",
            "premier_music_pro": "PREMIER_MUSIC_PRO",
            "premier_music_comp": "PREMIER_MUSIC_COMP",
            "asset_all_music": "ASSET_ALL_MUSIC",
        }
    
    @schemas.classproperty
    def AUDIO_PLATFORM(cls):
        return cls("audio_platform")
    
    @schemas.classproperty
    def PREMIER_MUSIC_BASIC(cls):
        return cls("premier_music_basic")
    
    @schemas.classproperty
    def PREMIER_MUSIC_EXTENDED(cls):
        return cls("premier_music_extended")
    
    @schemas.classproperty
    def PREMIER_MUSIC_PRO(cls):
        return cls("premier_music_pro")
    
    @schemas.classproperty
    def PREMIER_MUSIC_COMP(cls):
        return cls("premier_music_comp")
    
    @schemas.classproperty
    def ASSET_ALL_MUSIC(cls):
        return cls("asset_all_music")
SearchIdSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'license': typing.Union[LicenseSchema, str, ],
        'search_id': typing.Union[SearchIdSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_license = api_client.QueryParameter(
    name="license",
    style=api_client.ParameterStyle.FORM,
    schema=LicenseSchema,
    explode=True,
)
request_query_search_id = api_client.QueryParameter(
    name="search_id",
    style=api_client.ParameterStyle.FORM,
    schema=SearchIdSchema,
    explode=True,
)
# body param
SchemaForRequestBodyApplicationJson = LicenseAudioRequestSchema


request_body_license_audio_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'customer_accessCode',
]
SchemaFor200ResponseBodyApplicationJson = LicenseAudioResultDataListSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: LicenseAudioResultDataList


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: LicenseAudioResultDataList


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '403': _response_for_403,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _license_tracks_mapped_args(
        self,
        audio: typing.List[LicenseAudio],
        license: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _body = {}
        if audio is not None:
            _body["audio"] = audio
        args.body = _body
        if license is not None:
            _query_params["license"] = license
        if search_id is not None:
            _query_params["search_id"] = search_id
        args.query = _query_params
        return args

    async def _alicense_tracks_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        License audio tracks
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_license,
            request_query_search_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/audio/licenses',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_license_audio_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _license_tracks_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        License audio tracks
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_license,
            request_query_search_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/audio/licenses',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_license_audio_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class LicenseTracksRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alicense_tracks(
        self,
        audio: typing.List[LicenseAudio],
        license: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._license_tracks_mapped_args(
            audio=audio,
            license=license,
            search_id=search_id,
        )
        return await self._alicense_tracks_oapg(
            body=args.body,
            query_params=args.query,
            **kwargs,
        )
    
    def license_tracks(
        self,
        audio: typing.List[LicenseAudio],
        license: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._license_tracks_mapped_args(
            audio=audio,
            license=license,
            search_id=search_id,
        )
        return self._license_tracks_oapg(
            body=args.body,
            query_params=args.query,
        )

class LicenseTracks(BaseApi):

    async def alicense_tracks(
        self,
        audio: typing.List[LicenseAudio],
        license: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> LicenseAudioResultDataListPydantic:
        raw_response = await self.raw.alicense_tracks(
            audio=audio,
            license=license,
            search_id=search_id,
            **kwargs,
        )
        if validate:
            return LicenseAudioResultDataListPydantic(**raw_response.body)
        return api_client.construct_model_instance(LicenseAudioResultDataListPydantic, raw_response.body)
    
    
    def license_tracks(
        self,
        audio: typing.List[LicenseAudio],
        license: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
        validate: bool = False,
    ) -> LicenseAudioResultDataListPydantic:
        raw_response = self.raw.license_tracks(
            audio=audio,
            license=license,
            search_id=search_id,
        )
        if validate:
            return LicenseAudioResultDataListPydantic(**raw_response.body)
        return api_client.construct_model_instance(LicenseAudioResultDataListPydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        audio: typing.List[LicenseAudio],
        license: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._license_tracks_mapped_args(
            audio=audio,
            license=license,
            search_id=search_id,
        )
        return await self._alicense_tracks_oapg(
            body=args.body,
            query_params=args.query,
            **kwargs,
        )
    
    def post(
        self,
        audio: typing.List[LicenseAudio],
        license: typing.Optional[str] = None,
        search_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._license_tracks_mapped_args(
            audio=audio,
            license=license,
            search_id=search_id,
        )
        return self._license_tracks_oapg(
            body=args.body,
            query_params=args.query,
        )

