# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel


class OauthGetUserAccessTokenRequest1(BaseModel):
    # Client ID (Consumer Key) of your application
    client_id: str = Field(alias='client_id')

    # Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
    grant_type: Literal["authorization_code", "client_credentials", "refresh_token"] = Field(alias='grant_type')

    # Client Secret (Consumer Secret) of your application
    client_secret: typing.Optional[str] = Field(None, alias='client_secret')

    # Response code from the /oauth/authorize flow; required if grant_type=authorization_code
    code: typing.Optional[str] = Field(None, alias='code')

    # Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token
    expires: typing.Optional[Literal["true", "false"]] = Field(None, alias='expires')

    # User type to be authorized (usually 'customer')
    realm: typing.Optional[Literal["customer", "contributor"]] = Field(None, alias='realm')

    # Pass this along with grant_type=refresh_token to get a fresh access token
    refresh_token: typing.Optional[str] = Field(None, alias='refresh_token')
    class Config:
        arbitrary_types_allowed = True
