# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from shutterstock_python_sdk.pydantic.category import Category
from shutterstock_python_sdk.pydantic.contributor import Contributor
from shutterstock_python_sdk.pydantic.image_assets import ImageAssets
from shutterstock_python_sdk.pydantic.image_insights import ImageInsights
from shutterstock_python_sdk.pydantic.image_keywords import ImageKeywords
from shutterstock_python_sdk.pydantic.image_releases import ImageReleases
from shutterstock_python_sdk.pydantic.model import Model
from shutterstock_python_sdk.pydantic.model_release import ModelRelease

class Image(BaseModel):
    contributor: Contributor = Field(alias='contributor')

    # Image ID
    id: str = Field(alias='id')

    # Media type of this image, should always be \"image\"
    media_type: str = Field(alias='media_type')

    # Detailed description of the image
    description: typing.Optional[str] = Field(None, alias='description')

    # Date that the image was added by the contributor
    added_date: typing.Optional[date] = Field(None, alias='added_date')

    # Affiliate referral link; appears only for registered affiliate partners
    affiliate_url: typing.Optional[str] = Field(None, alias='affiliate_url')

    # Aspect ratio of the image in decimal format, such as 0.6667
    aspect: typing.Optional[typing.Union[int, float]] = Field(None, alias='aspect')

    assets: typing.Optional[ImageAssets] = Field(None, alias='assets')

    # Categories that this image is a part of
    categories: typing.Optional[typing.List[Category]] = Field(None, alias='categories')

    # Indicates whether there are model releases for the image
    has_model_release: typing.Optional[bool] = Field(None, alias='has_model_release')

    # Indicates whether there are property releases for the image
    has_property_release: typing.Optional[bool] = Field(None, alias='has_property_release')

    # Type of image
    image_type: typing.Optional[str] = Field(None, alias='image_type')

    insights: typing.Optional[ImageInsights] = Field(None, alias='insights')

    # Whether or not this image contains adult content
    is_adult: typing.Optional[bool] = Field(None, alias='is_adult')

    # Whether or not this image is editorial content
    is_editorial: typing.Optional[bool] = Field(None, alias='is_editorial')

    # Whether or not this image is an illustration
    is_illustration: typing.Optional[bool] = Field(None, alias='is_illustration')

    keywords: typing.Optional[ImageKeywords] = Field(None, alias='keywords')

    # List of model releases
    model_releases_: typing.Optional[typing.List[ModelRelease]] = Field(None, alias='model_releases')

    # List of models
    models: typing.Optional[typing.List[Model]] = Field(None, alias='models')

    releases: typing.Optional[ImageReleases] = Field(None, alias='releases')

    # Link to image information page; included only for certain accounts
    url: typing.Optional[str] = Field(None, alias='url')
    class Config:
        arbitrary_types_allowed = True
