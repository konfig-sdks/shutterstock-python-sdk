# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from shutterstock_python_sdk.pydantic.language import Language
from shutterstock_python_sdk.pydantic.search_image_contributor import SearchImageContributor
from shutterstock_python_sdk.pydantic.search_image_image_type import SearchImageImageType
from shutterstock_python_sdk.pydantic.search_image_license import SearchImageLicense
from shutterstock_python_sdk.pydantic.search_image_model import SearchImageModel
from shutterstock_python_sdk.pydantic.search_image_people_ethnicity import SearchImagePeopleEthnicity

class SearchImage(BaseModel):
    # Show images added on the specified date
    added_date: typing.Optional[date] = Field(None, alias='added_date')

    # Show images added before the specified date
    added_date_end: typing.Optional[date] = Field(None, alias='added_date_end')

    # Show images added on or after the specified date
    added_date_start: typing.Optional[date] = Field(None, alias='added_date_start')

    # Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
    aspect_ratio: typing.Optional[typing.Union[int, float]] = Field(None, alias='aspect_ratio')

    # Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
    aspect_ratio_max: typing.Optional[typing.Union[int, float]] = Field(None, alias='aspect_ratio_max')

    # Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
    aspect_ratio_min: typing.Optional[typing.Union[int, float]] = Field(None, alias='aspect_ratio_min')

    # Show only authentic images
    authentic: typing.Optional[bool] = Field(None, alias='authentic')

    # Show images with the specified Shutterstock-defined category; specify a category name or ID
    category: typing.Optional[str] = Field(None, alias='category')

    # Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
    color: typing.Optional[str] = Field(None, alias='color')

    contributor: typing.Optional[SearchImageContributor] = Field(None, alias='contributor')

    # Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
    contributor_country: typing.Optional[typing.Union[typing.List[str], typing.List[str]]] = Field(None, alias='contributor_country')

    # Fields to display in the response; see the documentation for the fields parameter in the overview section
    fields: typing.Optional[str] = Field(None, alias='fields')

    # (Deprecated; use height_from and height_to instead) Show images with the specified height
    height: typing.Optional[int] = Field(None, alias='height')

    # Show images with the specified height or larger, in pixels
    height_from: typing.Optional[int] = Field(None, alias='height_from')

    # Show images with the specified height or smaller, in pixels
    height_to: typing.Optional[int] = Field(None, alias='height_to')

    image_type: typing.Optional[SearchImageImageType] = Field(None, alias='image_type')

    # Hide results with potentially unsafe keywords
    keyword_safe_search: typing.Optional[bool] = Field(None, alias='keyword_safe_search')

    language: typing.Optional[Language] = Field(None, alias='language')

    license: typing.Optional[SearchImageLicense] = Field(None, alias='license')

    model: typing.Optional[SearchImageModel] = Field(None, alias='model')

    # Show image results with horizontal or vertical orientation
    orientation: typing.Optional[Literal["horizontal", "vertical"]] = Field(None, alias='orientation')

    # Page number
    page: typing.Optional[int] = Field(None, alias='page')

    # Show images that feature people of the specified age category
    people_age: typing.Optional[Literal["infants", "children", "teenagers", "20s", "30s", "40s", "50s", "60s", "older"]] = Field(None, alias='people_age')

    people_ethnicity: typing.Optional[SearchImagePeopleEthnicity] = Field(None, alias='people_ethnicity')

    # Show images with people of the specified gender
    people_gender: typing.Optional[Literal["male", "female", "both"]] = Field(None, alias='people_gender')

    # Show images of people with a signed model release
    people_model_released: typing.Optional[bool] = Field(None, alias='people_model_released')

    # Show images with the specified number of people
    people_number: typing.Optional[int] = Field(None, alias='people_number')

    # Number of results per page
    per_page: typing.Optional[int] = Field(None, alias='per_page')

    # One or more search terms separated by spaces; you can use NOT to filter out images that match a term
    query: typing.Optional[str] = Field(None, alias='query')

    # Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
    region: typing.Optional[typing.Union[str, str]] = Field(None, alias='region')

    # Enable or disable safe search
    safe: typing.Optional[bool] = Field(None, alias='safe')

    # Sort by
    sort: typing.Optional[Literal["newest", "popular", "relevance", "random"]] = Field(None, alias='sort')

    # Spellcheck the search query and return results on suggested spellings
    spellcheck_query: typing.Optional[bool] = Field(None, alias='spellcheck_query')

    # Amount of detail to render in the response
    view: typing.Optional[Literal["minimal", "full"]] = Field(None, alias='view')

    # (Deprecated; use width_from and width_to instead) Show images with the specified width
    width: typing.Optional[int] = Field(None, alias='width')

    # Show images with the specified width or larger, in pixels
    width_from: typing.Optional[int] = Field(None, alias='width_from')

    # Show images with the specified width or smaller, in pixels
    width_to: typing.Optional[int] = Field(None, alias='width_to')
    class Config:
        arbitrary_types_allowed = True
