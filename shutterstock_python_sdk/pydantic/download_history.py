# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from shutterstock_python_sdk.pydantic.download_history_media_details import DownloadHistoryMediaDetails
from shutterstock_python_sdk.pydantic.download_history_revshare_details import DownloadHistoryRevshareDetails
from shutterstock_python_sdk.pydantic.download_history_user_details import DownloadHistoryUserDetails

class DownloadHistory(BaseModel):
    # Date the media was downloaded the first time
    download_time: datetime = Field(alias='download_time')

    # ID of the download
    id: str = Field(alias='id')

    # The name of the license of this download
    license: str = Field(alias='license')

    audio: typing.Optional[DownloadHistoryMediaDetails] = Field(None, alias='audio')

    image: typing.Optional[DownloadHistoryMediaDetails] = Field(None, alias='image')

    # Specifies if the media is downloadable via its respective downloads endpoint
    is_downloadable: typing.Optional[bool] = Field(None, alias='is_downloadable')

    # The metadata that was passed in the original licensing request
    metadata: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='metadata')

    revshare: typing.Optional[DownloadHistoryRevshareDetails] = Field(None, alias='revshare')

    # ID of the subscription used to perform this download
    subscription_id: typing.Optional[str] = Field(None, alias='subscription_id')

    user: typing.Optional[DownloadHistoryUserDetails] = Field(None, alias='user')

    video: typing.Optional[DownloadHistoryMediaDetails] = Field(None, alias='video')
    class Config:
        arbitrary_types_allowed = True
