# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401


class Image(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about an image
    """


    class MetaOapg:
        required = {
            "contributor",
            "media_type",
            "id",
        }
        
        class properties:
        
            @staticmethod
            def contributor() -> typing.Type['Contributor']:
                return Contributor
            id = schemas.StrSchema
            media_type = schemas.StrSchema
            description = schemas.StrSchema
            added_date = schemas.DateSchema
            affiliate_url = schemas.StrSchema
            aspect = schemas.NumberSchema
        
            @staticmethod
            def assets() -> typing.Type['ImageAssets']:
                return ImageAssets
            
            
            class categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Category']:
                        return Category
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Category'], typing.List['Category']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Category':
                    return super().__getitem__(i)
            has_model_release = schemas.BoolSchema
            has_property_release = schemas.BoolSchema
            image_type = schemas.StrSchema
        
            @staticmethod
            def insights() -> typing.Type['ImageInsights']:
                return ImageInsights
            is_adult = schemas.BoolSchema
            is_editorial = schemas.BoolSchema
            is_illustration = schemas.BoolSchema
        
            @staticmethod
            def keywords() -> typing.Type['ImageKeywords']:
                return ImageKeywords
            
            
            class model_releases(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelRelease']:
                        return ModelRelease
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelRelease'], typing.List['ModelRelease']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'model_releases':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelRelease':
                    return super().__getitem__(i)
            
            
            class models(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Model']:
                        return Model
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Model'], typing.List['Model']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'models':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Model':
                    return super().__getitem__(i)
        
            @staticmethod
            def releases() -> typing.Type['ImageReleases']:
                return ImageReleases
            url = schemas.StrSchema
            __annotations__ = {
                "contributor": contributor,
                "id": id,
                "media_type": media_type,
                "description": description,
                "added_date": added_date,
                "affiliate_url": affiliate_url,
                "aspect": aspect,
                "assets": assets,
                "categories": categories,
                "has_model_release": has_model_release,
                "has_property_release": has_property_release,
                "image_type": image_type,
                "insights": insights,
                "is_adult": is_adult,
                "is_editorial": is_editorial,
                "is_illustration": is_illustration,
                "keywords": keywords,
                "model_releases": model_releases,
                "models": models,
                "releases": releases,
                "url": url,
            }
    
    contributor: 'Contributor'
    media_type: MetaOapg.properties.media_type
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contributor"]) -> 'Contributor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_type"]) -> MetaOapg.properties.media_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["added_date"]) -> MetaOapg.properties.added_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["affiliate_url"]) -> MetaOapg.properties.affiliate_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aspect"]) -> MetaOapg.properties.aspect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assets"]) -> 'ImageAssets': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_model_release"]) -> MetaOapg.properties.has_model_release: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_property_release"]) -> MetaOapg.properties.has_property_release: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_type"]) -> MetaOapg.properties.image_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insights"]) -> 'ImageInsights': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_adult"]) -> MetaOapg.properties.is_adult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_editorial"]) -> MetaOapg.properties.is_editorial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_illustration"]) -> MetaOapg.properties.is_illustration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keywords"]) -> 'ImageKeywords': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_releases"]) -> MetaOapg.properties.model_releases: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["models"]) -> MetaOapg.properties.models: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releases"]) -> 'ImageReleases': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contributor", "id", "media_type", "description", "added_date", "affiliate_url", "aspect", "assets", "categories", "has_model_release", "has_property_release", "image_type", "insights", "is_adult", "is_editorial", "is_illustration", "keywords", "model_releases", "models", "releases", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contributor"]) -> 'Contributor': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_type"]) -> MetaOapg.properties.media_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["added_date"]) -> typing.Union[MetaOapg.properties.added_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["affiliate_url"]) -> typing.Union[MetaOapg.properties.affiliate_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aspect"]) -> typing.Union[MetaOapg.properties.aspect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assets"]) -> typing.Union['ImageAssets', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> typing.Union[MetaOapg.properties.categories, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_model_release"]) -> typing.Union[MetaOapg.properties.has_model_release, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_property_release"]) -> typing.Union[MetaOapg.properties.has_property_release, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_type"]) -> typing.Union[MetaOapg.properties.image_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insights"]) -> typing.Union['ImageInsights', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_adult"]) -> typing.Union[MetaOapg.properties.is_adult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_editorial"]) -> typing.Union[MetaOapg.properties.is_editorial, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_illustration"]) -> typing.Union[MetaOapg.properties.is_illustration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keywords"]) -> typing.Union['ImageKeywords', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_releases"]) -> typing.Union[MetaOapg.properties.model_releases, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["models"]) -> typing.Union[MetaOapg.properties.models, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releases"]) -> typing.Union['ImageReleases', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contributor", "id", "media_type", "description", "added_date", "affiliate_url", "aspect", "assets", "categories", "has_model_release", "has_property_release", "image_type", "insights", "is_adult", "is_editorial", "is_illustration", "keywords", "model_releases", "models", "releases", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contributor: 'Contributor',
        media_type: typing.Union[MetaOapg.properties.media_type, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        added_date: typing.Union[MetaOapg.properties.added_date, str, date, schemas.Unset] = schemas.unset,
        affiliate_url: typing.Union[MetaOapg.properties.affiliate_url, str, schemas.Unset] = schemas.unset,
        aspect: typing.Union[MetaOapg.properties.aspect, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        assets: typing.Union['ImageAssets', schemas.Unset] = schemas.unset,
        categories: typing.Union[MetaOapg.properties.categories, list, tuple, schemas.Unset] = schemas.unset,
        has_model_release: typing.Union[MetaOapg.properties.has_model_release, bool, schemas.Unset] = schemas.unset,
        has_property_release: typing.Union[MetaOapg.properties.has_property_release, bool, schemas.Unset] = schemas.unset,
        image_type: typing.Union[MetaOapg.properties.image_type, str, schemas.Unset] = schemas.unset,
        insights: typing.Union['ImageInsights', schemas.Unset] = schemas.unset,
        is_adult: typing.Union[MetaOapg.properties.is_adult, bool, schemas.Unset] = schemas.unset,
        is_editorial: typing.Union[MetaOapg.properties.is_editorial, bool, schemas.Unset] = schemas.unset,
        is_illustration: typing.Union[MetaOapg.properties.is_illustration, bool, schemas.Unset] = schemas.unset,
        keywords: typing.Union['ImageKeywords', schemas.Unset] = schemas.unset,
        model_releases: typing.Union[MetaOapg.properties.model_releases, list, tuple, schemas.Unset] = schemas.unset,
        models: typing.Union[MetaOapg.properties.models, list, tuple, schemas.Unset] = schemas.unset,
        releases: typing.Union['ImageReleases', schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Image':
        return super().__new__(
            cls,
            *args,
            contributor=contributor,
            media_type=media_type,
            id=id,
            description=description,
            added_date=added_date,
            affiliate_url=affiliate_url,
            aspect=aspect,
            assets=assets,
            categories=categories,
            has_model_release=has_model_release,
            has_property_release=has_property_release,
            image_type=image_type,
            insights=insights,
            is_adult=is_adult,
            is_editorial=is_editorial,
            is_illustration=is_illustration,
            keywords=keywords,
            model_releases=model_releases,
            models=models,
            releases=releases,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from shutterstock_python_sdk.model.category import Category
from shutterstock_python_sdk.model.contributor import Contributor
from shutterstock_python_sdk.model.image_assets import ImageAssets
from shutterstock_python_sdk.model.image_insights import ImageInsights
from shutterstock_python_sdk.model.image_keywords import ImageKeywords
from shutterstock_python_sdk.model.image_releases import ImageReleases
from shutterstock_python_sdk.model.model import Model
from shutterstock_python_sdk.model.model_release import ModelRelease
