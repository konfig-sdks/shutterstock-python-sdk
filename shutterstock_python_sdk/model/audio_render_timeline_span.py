# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401


class AudioRenderTimelineSpan(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The beginning of a non-overlapping period of absolute time
    """


    class MetaOapg:
        required = {
            "span_type",
            "time",
        }
        
        class properties:
            
            
            class span_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "metered": "METERED",
                        "unmetered": "UNMETERED",
                    }
                
                @schemas.classproperty
                def METERED(cls):
                    return cls("metered")
                
                @schemas.classproperty
                def UNMETERED(cls):
                    return cls("unmetered")
            time = schemas.IntSchema
            id = schemas.NumberSchema
            
            
            class instrument_groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AudioRenderTimelineSpanInstrumentGroup']:
                        return AudioRenderTimelineSpanInstrumentGroup
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AudioRenderTimelineSpanInstrumentGroup'], typing.List['AudioRenderTimelineSpanInstrumentGroup']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'instrument_groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AudioRenderTimelineSpanInstrumentGroup':
                    return super().__getitem__(i)
            
            
            class regions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AudioRenderTimelineSpanRegion']:
                        return AudioRenderTimelineSpanRegion
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AudioRenderTimelineSpanRegion'], typing.List['AudioRenderTimelineSpanRegion']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'regions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AudioRenderTimelineSpanRegion':
                    return super().__getitem__(i)
            tempo = schemas.IntSchema
            
            
            class tempo_changes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AudioRenderTimelineSpanTempoChanges']:
                        return AudioRenderTimelineSpanTempoChanges
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AudioRenderTimelineSpanTempoChanges'], typing.List['AudioRenderTimelineSpanTempoChanges']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tempo_changes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AudioRenderTimelineSpanTempoChanges':
                    return super().__getitem__(i)
            __annotations__ = {
                "span_type": span_type,
                "time": time,
                "id": id,
                "instrument_groups": instrument_groups,
                "regions": regions,
                "tempo": tempo,
                "tempo_changes": tempo_changes,
            }
    
    span_type: MetaOapg.properties.span_type
    time: MetaOapg.properties.time
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["span_type"]) -> MetaOapg.properties.span_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instrument_groups"]) -> MetaOapg.properties.instrument_groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regions"]) -> MetaOapg.properties.regions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempo"]) -> MetaOapg.properties.tempo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempo_changes"]) -> MetaOapg.properties.tempo_changes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["span_type", "time", "id", "instrument_groups", "regions", "tempo", "tempo_changes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["span_type"]) -> MetaOapg.properties.span_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instrument_groups"]) -> typing.Union[MetaOapg.properties.instrument_groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regions"]) -> typing.Union[MetaOapg.properties.regions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempo"]) -> typing.Union[MetaOapg.properties.tempo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempo_changes"]) -> typing.Union[MetaOapg.properties.tempo_changes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["span_type", "time", "id", "instrument_groups", "regions", "tempo", "tempo_changes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        span_type: typing.Union[MetaOapg.properties.span_type, str, ],
        time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        instrument_groups: typing.Union[MetaOapg.properties.instrument_groups, list, tuple, schemas.Unset] = schemas.unset,
        regions: typing.Union[MetaOapg.properties.regions, list, tuple, schemas.Unset] = schemas.unset,
        tempo: typing.Union[MetaOapg.properties.tempo, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tempo_changes: typing.Union[MetaOapg.properties.tempo_changes, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AudioRenderTimelineSpan':
        return super().__new__(
            cls,
            *args,
            span_type=span_type,
            time=time,
            id=id,
            instrument_groups=instrument_groups,
            regions=regions,
            tempo=tempo,
            tempo_changes=tempo_changes,
            _configuration=_configuration,
            **kwargs,
        )

from shutterstock_python_sdk.model.audio_render_timeline_span_instrument_group import AudioRenderTimelineSpanInstrumentGroup
from shutterstock_python_sdk.model.audio_render_timeline_span_region import AudioRenderTimelineSpanRegion
from shutterstock_python_sdk.model.audio_render_timeline_span_tempo_changes import AudioRenderTimelineSpanTempoChanges
