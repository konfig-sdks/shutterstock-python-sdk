# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401


class Subscription(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Subscription information
    """


    class MetaOapg:
        required = {
            "id",
        }
        
        class properties:
            id = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def allotment() -> typing.Type['Allotment']:
                return Allotment
            asset_type = schemas.StrSchema
            expiration_time = schemas.DateTimeSchema
            
            
            class formats(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LicenseFormat']:
                        return LicenseFormat
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LicenseFormat'], typing.List['LicenseFormat']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'formats':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LicenseFormat':
                    return super().__getitem__(i)
            license = schemas.StrSchema
            metadata = schemas.DictSchema
        
            @staticmethod
            def price_per_download() -> typing.Type['Price']:
                return Price
            __annotations__ = {
                "id": id,
                "description": description,
                "allotment": allotment,
                "asset_type": asset_type,
                "expiration_time": expiration_time,
                "formats": formats,
                "license": license,
                "metadata": metadata,
                "price_per_download": price_per_download,
            }
    
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allotment"]) -> 'Allotment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset_type"]) -> MetaOapg.properties.asset_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiration_time"]) -> MetaOapg.properties.expiration_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formats"]) -> MetaOapg.properties.formats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_per_download"]) -> 'Price': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "description", "allotment", "asset_type", "expiration_time", "formats", "license", "metadata", "price_per_download", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allotment"]) -> typing.Union['Allotment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset_type"]) -> typing.Union[MetaOapg.properties.asset_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiration_time"]) -> typing.Union[MetaOapg.properties.expiration_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formats"]) -> typing.Union[MetaOapg.properties.formats, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> typing.Union[MetaOapg.properties.license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_per_download"]) -> typing.Union['Price', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "description", "allotment", "asset_type", "expiration_time", "formats", "license", "metadata", "price_per_download", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        allotment: typing.Union['Allotment', schemas.Unset] = schemas.unset,
        asset_type: typing.Union[MetaOapg.properties.asset_type, str, schemas.Unset] = schemas.unset,
        expiration_time: typing.Union[MetaOapg.properties.expiration_time, str, datetime, schemas.Unset] = schemas.unset,
        formats: typing.Union[MetaOapg.properties.formats, list, tuple, schemas.Unset] = schemas.unset,
        license: typing.Union[MetaOapg.properties.license, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        price_per_download: typing.Union['Price', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Subscription':
        return super().__new__(
            cls,
            *args,
            id=id,
            description=description,
            allotment=allotment,
            asset_type=asset_type,
            expiration_time=expiration_time,
            formats=formats,
            license=license,
            metadata=metadata,
            price_per_download=price_per_download,
            _configuration=_configuration,
            **kwargs,
        )

from shutterstock_python_sdk.model.allotment import Allotment
from shutterstock_python_sdk.model.license_format import LicenseFormat
from shutterstock_python_sdk.model.price import Price
