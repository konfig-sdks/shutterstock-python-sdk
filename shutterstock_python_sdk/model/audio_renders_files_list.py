# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401


class AudioRendersFilesList(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Files associated with the render
    """


    class MetaOapg:
        required = {
            "kbits_second",
            "filename",
            "size_bytes",
            "content_type",
            "download_url",
            "frequency_hz",
            "tracks",
            "bits_sample",
        }
        
        class properties:
            bits_sample = schemas.NumberSchema
            content_type = schemas.StrSchema
            download_url = schemas.StrSchema
            filename = schemas.StrSchema
            frequency_hz = schemas.NumberSchema
            kbits_second = schemas.NumberSchema
            size_bytes = schemas.NumberSchema
        
            @staticmethod
            def tracks() -> typing.Type['AudioRendersFilesListTracks']:
                return AudioRendersFilesListTracks
            __annotations__ = {
                "bits_sample": bits_sample,
                "content_type": content_type,
                "download_url": download_url,
                "filename": filename,
                "frequency_hz": frequency_hz,
                "kbits_second": kbits_second,
                "size_bytes": size_bytes,
                "tracks": tracks,
            }
    
    kbits_second: MetaOapg.properties.kbits_second
    filename: MetaOapg.properties.filename
    size_bytes: MetaOapg.properties.size_bytes
    content_type: MetaOapg.properties.content_type
    download_url: MetaOapg.properties.download_url
    frequency_hz: MetaOapg.properties.frequency_hz
    tracks: 'AudioRendersFilesListTracks'
    bits_sample: MetaOapg.properties.bits_sample
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bits_sample"]) -> MetaOapg.properties.bits_sample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_type"]) -> MetaOapg.properties.content_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download_url"]) -> MetaOapg.properties.download_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency_hz"]) -> MetaOapg.properties.frequency_hz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kbits_second"]) -> MetaOapg.properties.kbits_second: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_bytes"]) -> MetaOapg.properties.size_bytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracks"]) -> 'AudioRendersFilesListTracks': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bits_sample", "content_type", "download_url", "filename", "frequency_hz", "kbits_second", "size_bytes", "tracks", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bits_sample"]) -> MetaOapg.properties.bits_sample: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_type"]) -> MetaOapg.properties.content_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download_url"]) -> MetaOapg.properties.download_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency_hz"]) -> MetaOapg.properties.frequency_hz: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kbits_second"]) -> MetaOapg.properties.kbits_second: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_bytes"]) -> MetaOapg.properties.size_bytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracks"]) -> 'AudioRendersFilesListTracks': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bits_sample", "content_type", "download_url", "filename", "frequency_hz", "kbits_second", "size_bytes", "tracks", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        kbits_second: typing.Union[MetaOapg.properties.kbits_second, decimal.Decimal, int, float, ],
        filename: typing.Union[MetaOapg.properties.filename, str, ],
        size_bytes: typing.Union[MetaOapg.properties.size_bytes, decimal.Decimal, int, float, ],
        content_type: typing.Union[MetaOapg.properties.content_type, str, ],
        download_url: typing.Union[MetaOapg.properties.download_url, str, ],
        frequency_hz: typing.Union[MetaOapg.properties.frequency_hz, decimal.Decimal, int, float, ],
        tracks: 'AudioRendersFilesListTracks',
        bits_sample: typing.Union[MetaOapg.properties.bits_sample, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AudioRendersFilesList':
        return super().__new__(
            cls,
            *args,
            kbits_second=kbits_second,
            filename=filename,
            size_bytes=size_bytes,
            content_type=content_type,
            download_url=download_url,
            frequency_hz=frequency_hz,
            tracks=tracks,
            bits_sample=bits_sample,
            _configuration=_configuration,
            **kwargs,
        )

from shutterstock_python_sdk.model.audio_renders_files_list_tracks import AudioRendersFilesListTracks
