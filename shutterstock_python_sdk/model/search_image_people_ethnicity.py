# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401


class SearchImagePeopleEthnicity(
    schemas.ListSchema
):
    """NOTE:
    This class is auto generated by Konfig (https://konfigthis.com)

    Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
    """


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "african": "AFRICAN",
                    "african_american": "AFRICAN_AMERICAN",
                    "black": "BLACK",
                    "brazilian": "BRAZILIAN",
                    "chinese": "CHINESE",
                    "caucasian": "CAUCASIAN",
                    "east_asian": "EAST_ASIAN",
                    "hispanic": "HISPANIC",
                    "japanese": "JAPANESE",
                    "middle_eastern": "MIDDLE_EASTERN",
                    "native_american": "NATIVE_AMERICAN",
                    "pacific_islander": "PACIFIC_ISLANDER",
                    "south_asian": "SOUTH_ASIAN",
                    "southeast_asian": "SOUTHEAST_ASIAN",
                    "other": "OTHER",
                    "NOT african": "NOT_AFRICAN",
                    "NOT african_american": "NOT_AFRICAN_AMERICAN",
                    "NOT black": "NOT_BLACK",
                    "NOT brazilian": "NOT_BRAZILIAN",
                    "NOT chinese": "NOT_CHINESE",
                    "NOT caucasian": "NOT_CAUCASIAN",
                    "NOT east_asian": "NOT_EAST_ASIAN",
                    "NOT hispanic": "NOT_HISPANIC",
                    "NOT japanese": "NOT_JAPANESE",
                    "NOT middle_eastern": "NOT_MIDDLE_EASTERN",
                    "NOT native_american": "NOT_NATIVE_AMERICAN",
                    "NOT pacific_islander": "NOT_PACIFIC_ISLANDER",
                    "NOT south_asian": "NOT_SOUTH_ASIAN",
                    "NOT southeast_asian": "NOT_SOUTHEAST_ASIAN",
                    "NOT other": "NOT_OTHER",
                }
            
            @schemas.classproperty
            def AFRICAN(cls):
                return cls("african")
            
            @schemas.classproperty
            def AFRICAN_AMERICAN(cls):
                return cls("african_american")
            
            @schemas.classproperty
            def BLACK(cls):
                return cls("black")
            
            @schemas.classproperty
            def BRAZILIAN(cls):
                return cls("brazilian")
            
            @schemas.classproperty
            def CHINESE(cls):
                return cls("chinese")
            
            @schemas.classproperty
            def CAUCASIAN(cls):
                return cls("caucasian")
            
            @schemas.classproperty
            def EAST_ASIAN(cls):
                return cls("east_asian")
            
            @schemas.classproperty
            def HISPANIC(cls):
                return cls("hispanic")
            
            @schemas.classproperty
            def JAPANESE(cls):
                return cls("japanese")
            
            @schemas.classproperty
            def MIDDLE_EASTERN(cls):
                return cls("middle_eastern")
            
            @schemas.classproperty
            def NATIVE_AMERICAN(cls):
                return cls("native_american")
            
            @schemas.classproperty
            def PACIFIC_ISLANDER(cls):
                return cls("pacific_islander")
            
            @schemas.classproperty
            def SOUTH_ASIAN(cls):
                return cls("south_asian")
            
            @schemas.classproperty
            def SOUTHEAST_ASIAN(cls):
                return cls("southeast_asian")
            
            @schemas.classproperty
            def OTHER(cls):
                return cls("other")
            
            @schemas.classproperty
            def NOT_AFRICAN(cls):
                return cls("NOT african")
            
            @schemas.classproperty
            def NOT_AFRICAN_AMERICAN(cls):
                return cls("NOT african_american")
            
            @schemas.classproperty
            def NOT_BLACK(cls):
                return cls("NOT black")
            
            @schemas.classproperty
            def NOT_BRAZILIAN(cls):
                return cls("NOT brazilian")
            
            @schemas.classproperty
            def NOT_CHINESE(cls):
                return cls("NOT chinese")
            
            @schemas.classproperty
            def NOT_CAUCASIAN(cls):
                return cls("NOT caucasian")
            
            @schemas.classproperty
            def NOT_EAST_ASIAN(cls):
                return cls("NOT east_asian")
            
            @schemas.classproperty
            def NOT_HISPANIC(cls):
                return cls("NOT hispanic")
            
            @schemas.classproperty
            def NOT_JAPANESE(cls):
                return cls("NOT japanese")
            
            @schemas.classproperty
            def NOT_MIDDLE_EASTERN(cls):
                return cls("NOT middle_eastern")
            
            @schemas.classproperty
            def NOT_NATIVE_AMERICAN(cls):
                return cls("NOT native_american")
            
            @schemas.classproperty
            def NOT_PACIFIC_ISLANDER(cls):
                return cls("NOT pacific_islander")
            
            @schemas.classproperty
            def NOT_SOUTH_ASIAN(cls):
                return cls("NOT south_asian")
            
            @schemas.classproperty
            def NOT_SOUTHEAST_ASIAN(cls):
                return cls("NOT southeast_asian")
            
            @schemas.classproperty
            def NOT_OTHER(cls):
                return cls("NOT other")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SearchImagePeopleEthnicity':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
