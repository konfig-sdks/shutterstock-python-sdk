# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401


class LicenseSFX(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "subscription_id",
            "sfx_id",
        }
        
        class properties:
            sfx_id = schemas.StrSchema
            subscription_id = schemas.StrSchema
            
            
            class audio_layout(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ambisonic": "AMBISONIC",
                        "5.1": "POSITIVE_5_PT_1",
                        "stereo": "STEREO",
                    }
                
                @schemas.classproperty
                def AMBISONIC(cls):
                    return cls("ambisonic")
                
                @schemas.classproperty
                def POSITIVE_5_PT_1(cls):
                    return cls("5.1")
                
                @schemas.classproperty
                def STEREO(cls):
                    return cls("stereo")
            
            
            class format(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "wav": "WAV",
                        "mp3": "MP3",
                    }
                
                @schemas.classproperty
                def WAV(cls):
                    return cls("wav")
                
                @schemas.classproperty
                def MP3(cls):
                    return cls("mp3")
            search_id = schemas.StrSchema
            __annotations__ = {
                "sfx_id": sfx_id,
                "subscription_id": subscription_id,
                "audio_layout": audio_layout,
                "format": format,
                "search_id": search_id,
            }
    
    subscription_id: MetaOapg.properties.subscription_id
    sfx_id: MetaOapg.properties.sfx_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sfx_id"]) -> MetaOapg.properties.sfx_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription_id"]) -> MetaOapg.properties.subscription_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio_layout"]) -> MetaOapg.properties.audio_layout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["search_id"]) -> MetaOapg.properties.search_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sfx_id", "subscription_id", "audio_layout", "format", "search_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sfx_id"]) -> MetaOapg.properties.sfx_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription_id"]) -> MetaOapg.properties.subscription_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audio_layout"]) -> typing.Union[MetaOapg.properties.audio_layout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union[MetaOapg.properties.format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["search_id"]) -> typing.Union[MetaOapg.properties.search_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sfx_id", "subscription_id", "audio_layout", "format", "search_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        subscription_id: typing.Union[MetaOapg.properties.subscription_id, str, ],
        sfx_id: typing.Union[MetaOapg.properties.sfx_id, str, ],
        audio_layout: typing.Union[MetaOapg.properties.audio_layout, str, schemas.Unset] = schemas.unset,
        format: typing.Union[MetaOapg.properties.format, str, schemas.Unset] = schemas.unset,
        search_id: typing.Union[MetaOapg.properties.search_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LicenseSFX':
        return super().__new__(
            cls,
            *args,
            subscription_id=subscription_id,
            sfx_id=sfx_id,
            audio_layout=audio_layout,
            format=format,
            search_id=search_id,
            _configuration=_configuration,
            **kwargs,
        )
