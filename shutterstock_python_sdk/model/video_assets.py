# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401


class VideoAssets(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Video asset information
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def _4k() -> typing.Type['VideoSizeDetails']:
                return VideoSizeDetails
        
            @staticmethod
            def hd() -> typing.Type['VideoSizeDetails']:
                return VideoSizeDetails
        
            @staticmethod
            def preview_jpg() -> typing.Type['Url']:
                return Url
        
            @staticmethod
            def preview_mp4() -> typing.Type['Url']:
                return Url
        
            @staticmethod
            def preview_webm() -> typing.Type['Url']:
                return Url
        
            @staticmethod
            def sd() -> typing.Type['VideoSizeDetails']:
                return VideoSizeDetails
        
            @staticmethod
            def thumb_jpg() -> typing.Type['Url']:
                return Url
        
            @staticmethod
            def thumb_jpgs() -> typing.Type['Urls']:
                return Urls
        
            @staticmethod
            def thumb_mp4() -> typing.Type['Url']:
                return Url
        
            @staticmethod
            def thumb_webm() -> typing.Type['Url']:
                return Url
        
            @staticmethod
            def web() -> typing.Type['VideoSizeDetails']:
                return VideoSizeDetails
            __annotations__ = {
                "4k": _4k,
                "hd": hd,
                "preview_jpg": preview_jpg,
                "preview_mp4": preview_mp4,
                "preview_webm": preview_webm,
                "sd": sd,
                "thumb_jpg": thumb_jpg,
                "thumb_jpgs": thumb_jpgs,
                "thumb_mp4": thumb_mp4,
                "thumb_webm": thumb_webm,
                "web": web,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["4k"]) -> 'VideoSizeDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hd"]) -> 'VideoSizeDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preview_jpg"]) -> 'Url': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preview_mp4"]) -> 'Url': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preview_webm"]) -> 'Url': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sd"]) -> 'VideoSizeDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumb_jpg"]) -> 'Url': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumb_jpgs"]) -> 'Urls': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumb_mp4"]) -> 'Url': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumb_webm"]) -> 'Url': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["web"]) -> 'VideoSizeDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["4k", "hd", "preview_jpg", "preview_mp4", "preview_webm", "sd", "thumb_jpg", "thumb_jpgs", "thumb_mp4", "thumb_webm", "web", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["4k"]) -> typing.Union['VideoSizeDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hd"]) -> typing.Union['VideoSizeDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preview_jpg"]) -> typing.Union['Url', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preview_mp4"]) -> typing.Union['Url', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preview_webm"]) -> typing.Union['Url', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sd"]) -> typing.Union['VideoSizeDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumb_jpg"]) -> typing.Union['Url', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumb_jpgs"]) -> typing.Union['Urls', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumb_mp4"]) -> typing.Union['Url', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumb_webm"]) -> typing.Union['Url', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["web"]) -> typing.Union['VideoSizeDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["4k", "hd", "preview_jpg", "preview_mp4", "preview_webm", "sd", "thumb_jpg", "thumb_jpgs", "thumb_mp4", "thumb_webm", "web", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        hd: typing.Union['VideoSizeDetails', schemas.Unset] = schemas.unset,
        preview_jpg: typing.Union['Url', schemas.Unset] = schemas.unset,
        preview_mp4: typing.Union['Url', schemas.Unset] = schemas.unset,
        preview_webm: typing.Union['Url', schemas.Unset] = schemas.unset,
        sd: typing.Union['VideoSizeDetails', schemas.Unset] = schemas.unset,
        thumb_jpg: typing.Union['Url', schemas.Unset] = schemas.unset,
        thumb_jpgs: typing.Union['Urls', schemas.Unset] = schemas.unset,
        thumb_mp4: typing.Union['Url', schemas.Unset] = schemas.unset,
        thumb_webm: typing.Union['Url', schemas.Unset] = schemas.unset,
        web: typing.Union['VideoSizeDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoAssets':
        return super().__new__(
            cls,
            *args,
            hd=hd,
            preview_jpg=preview_jpg,
            preview_mp4=preview_mp4,
            preview_webm=preview_webm,
            sd=sd,
            thumb_jpg=thumb_jpg,
            thumb_jpgs=thumb_jpgs,
            thumb_mp4=thumb_mp4,
            thumb_webm=thumb_webm,
            web=web,
            _configuration=_configuration,
            **kwargs,
        )

from shutterstock_python_sdk.model.url import Url
from shutterstock_python_sdk.model.urls import Urls
from shutterstock_python_sdk.model.video_size_details import VideoSizeDetails
