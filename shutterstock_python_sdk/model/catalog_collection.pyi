# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401


class CatalogCollection(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Catalog collection
    """


    class MetaOapg:
        required = {
            "created_time",
            "role_assignments",
            "updated_time",
            "visibility",
            "name",
            "id",
            "total_item_count",
        }
        
        class properties:
            created_time = schemas.DateTimeSchema
            id = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def role_assignments() -> typing.Type['CatalogCollectionRoleAssignments']:
                return CatalogCollectionRoleAssignments
            total_item_count = schemas.NumberSchema
            updated_time = schemas.DateTimeSchema
            
            
            class visibility(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("private")
                
                @schemas.classproperty
                def PUBLIC(cls):
                    return cls("public")
        
            @staticmethod
            def cover_asset() -> typing.Type['CatalogCollectionItem']:
                return CatalogCollectionItem
            __annotations__ = {
                "created_time": created_time,
                "id": id,
                "name": name,
                "role_assignments": role_assignments,
                "total_item_count": total_item_count,
                "updated_time": updated_time,
                "visibility": visibility,
                "cover_asset": cover_asset,
            }
    
    created_time: MetaOapg.properties.created_time
    role_assignments: 'CatalogCollectionRoleAssignments'
    updated_time: MetaOapg.properties.updated_time
    visibility: MetaOapg.properties.visibility
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    total_item_count: MetaOapg.properties.total_item_count
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role_assignments"]) -> 'CatalogCollectionRoleAssignments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_item_count"]) -> MetaOapg.properties.total_item_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_time"]) -> MetaOapg.properties.updated_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visibility"]) -> MetaOapg.properties.visibility: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cover_asset"]) -> 'CatalogCollectionItem': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created_time", "id", "name", "role_assignments", "total_item_count", "updated_time", "visibility", "cover_asset", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role_assignments"]) -> 'CatalogCollectionRoleAssignments': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_item_count"]) -> MetaOapg.properties.total_item_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_time"]) -> MetaOapg.properties.updated_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visibility"]) -> MetaOapg.properties.visibility: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cover_asset"]) -> typing.Union['CatalogCollectionItem', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created_time", "id", "name", "role_assignments", "total_item_count", "updated_time", "visibility", "cover_asset", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created_time: typing.Union[MetaOapg.properties.created_time, str, datetime, ],
        role_assignments: 'CatalogCollectionRoleAssignments',
        updated_time: typing.Union[MetaOapg.properties.updated_time, str, datetime, ],
        visibility: typing.Union[MetaOapg.properties.visibility, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        total_item_count: typing.Union[MetaOapg.properties.total_item_count, decimal.Decimal, int, float, ],
        cover_asset: typing.Union['CatalogCollectionItem', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CatalogCollection':
        return super().__new__(
            cls,
            *args,
            created_time=created_time,
            role_assignments=role_assignments,
            updated_time=updated_time,
            visibility=visibility,
            name=name,
            id=id,
            total_item_count=total_item_count,
            cover_asset=cover_asset,
            _configuration=_configuration,
            **kwargs,
        )

from shutterstock_python_sdk.model.catalog_collection_item import CatalogCollectionItem
from shutterstock_python_sdk.model.catalog_collection_role_assignments import CatalogCollectionRoleAssignments
