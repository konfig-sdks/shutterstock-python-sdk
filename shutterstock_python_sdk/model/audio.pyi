# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401


class Audio(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Audio metadata
    """


    class MetaOapg:
        required = {
            "contributor",
            "media_type",
            "id",
        }
        
        class properties:
        
            @staticmethod
            def contributor() -> typing.Type['Contributor']:
                return Contributor
            id = schemas.StrSchema
            media_type = schemas.StrSchema
            title = schemas.StrSchema
            description = schemas.StrSchema
            added_date = schemas.DateSchema
            affiliate_url = schemas.StrSchema
        
            @staticmethod
            def album() -> typing.Type['Album']:
                return Album
            
            
            class artists(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Artist']:
                        return Artist
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Artist'], typing.List['Artist']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'artists':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Artist':
                    return super().__getitem__(i)
        
            @staticmethod
            def assets() -> typing.Type['AudioAssets']:
                return AudioAssets
            bpm = schemas.IntSchema
            deleted_time = schemas.DateTimeSchema
            duration = schemas.NumberSchema
        
            @staticmethod
            def genres() -> typing.Type['AudioGenres']:
                return AudioGenres
        
            @staticmethod
            def instruments() -> typing.Type['AudioInstruments']:
                return AudioInstruments
            is_adult = schemas.BoolSchema
            is_instrumental = schemas.BoolSchema
            isrc = schemas.StrSchema
        
            @staticmethod
            def keywords() -> typing.Type['AudioKeywords']:
                return AudioKeywords
            language = schemas.StrSchema
            lyrics = schemas.StrSchema
            
            
            class model_releases(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelRelease']:
                        return ModelRelease
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelRelease'], typing.List['ModelRelease']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'model_releases':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelRelease':
                    return super().__getitem__(i)
        
            @staticmethod
            def moods() -> typing.Type['AudioMoods']:
                return AudioMoods
            published_time = schemas.DateTimeSchema
            recording_version = schemas.StrSchema
        
            @staticmethod
            def releases() -> typing.Type['AudioReleases']:
                return AudioReleases
            
            
            class similar_artists(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Artist']:
                        return Artist
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Artist'], typing.List['Artist']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'similar_artists':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Artist':
                    return super().__getitem__(i)
            submitted_time = schemas.DateTimeSchema
            updated_time = schemas.DateTimeSchema
            url = schemas.StrSchema
            vocal_description = schemas.StrSchema
            __annotations__ = {
                "contributor": contributor,
                "id": id,
                "media_type": media_type,
                "title": title,
                "description": description,
                "added_date": added_date,
                "affiliate_url": affiliate_url,
                "album": album,
                "artists": artists,
                "assets": assets,
                "bpm": bpm,
                "deleted_time": deleted_time,
                "duration": duration,
                "genres": genres,
                "instruments": instruments,
                "is_adult": is_adult,
                "is_instrumental": is_instrumental,
                "isrc": isrc,
                "keywords": keywords,
                "language": language,
                "lyrics": lyrics,
                "model_releases": model_releases,
                "moods": moods,
                "published_time": published_time,
                "recording_version": recording_version,
                "releases": releases,
                "similar_artists": similar_artists,
                "submitted_time": submitted_time,
                "updated_time": updated_time,
                "url": url,
                "vocal_description": vocal_description,
            }
    
    contributor: 'Contributor'
    media_type: MetaOapg.properties.media_type
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contributor"]) -> 'Contributor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_type"]) -> MetaOapg.properties.media_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["added_date"]) -> MetaOapg.properties.added_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["affiliate_url"]) -> MetaOapg.properties.affiliate_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["album"]) -> 'Album': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["artists"]) -> MetaOapg.properties.artists: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assets"]) -> 'AudioAssets': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bpm"]) -> MetaOapg.properties.bpm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted_time"]) -> MetaOapg.properties.deleted_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["genres"]) -> 'AudioGenres': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instruments"]) -> 'AudioInstruments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_adult"]) -> MetaOapg.properties.is_adult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_instrumental"]) -> MetaOapg.properties.is_instrumental: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isrc"]) -> MetaOapg.properties.isrc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keywords"]) -> 'AudioKeywords': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lyrics"]) -> MetaOapg.properties.lyrics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_releases"]) -> MetaOapg.properties.model_releases: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["moods"]) -> 'AudioMoods': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["published_time"]) -> MetaOapg.properties.published_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording_version"]) -> MetaOapg.properties.recording_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releases"]) -> 'AudioReleases': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["similar_artists"]) -> MetaOapg.properties.similar_artists: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submitted_time"]) -> MetaOapg.properties.submitted_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_time"]) -> MetaOapg.properties.updated_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vocal_description"]) -> MetaOapg.properties.vocal_description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contributor", "id", "media_type", "title", "description", "added_date", "affiliate_url", "album", "artists", "assets", "bpm", "deleted_time", "duration", "genres", "instruments", "is_adult", "is_instrumental", "isrc", "keywords", "language", "lyrics", "model_releases", "moods", "published_time", "recording_version", "releases", "similar_artists", "submitted_time", "updated_time", "url", "vocal_description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contributor"]) -> 'Contributor': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_type"]) -> MetaOapg.properties.media_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["added_date"]) -> typing.Union[MetaOapg.properties.added_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["affiliate_url"]) -> typing.Union[MetaOapg.properties.affiliate_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["album"]) -> typing.Union['Album', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["artists"]) -> typing.Union[MetaOapg.properties.artists, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assets"]) -> typing.Union['AudioAssets', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bpm"]) -> typing.Union[MetaOapg.properties.bpm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted_time"]) -> typing.Union[MetaOapg.properties.deleted_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["genres"]) -> typing.Union['AudioGenres', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instruments"]) -> typing.Union['AudioInstruments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_adult"]) -> typing.Union[MetaOapg.properties.is_adult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_instrumental"]) -> typing.Union[MetaOapg.properties.is_instrumental, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isrc"]) -> typing.Union[MetaOapg.properties.isrc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keywords"]) -> typing.Union['AudioKeywords', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lyrics"]) -> typing.Union[MetaOapg.properties.lyrics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_releases"]) -> typing.Union[MetaOapg.properties.model_releases, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["moods"]) -> typing.Union['AudioMoods', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["published_time"]) -> typing.Union[MetaOapg.properties.published_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording_version"]) -> typing.Union[MetaOapg.properties.recording_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releases"]) -> typing.Union['AudioReleases', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["similar_artists"]) -> typing.Union[MetaOapg.properties.similar_artists, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submitted_time"]) -> typing.Union[MetaOapg.properties.submitted_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_time"]) -> typing.Union[MetaOapg.properties.updated_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vocal_description"]) -> typing.Union[MetaOapg.properties.vocal_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contributor", "id", "media_type", "title", "description", "added_date", "affiliate_url", "album", "artists", "assets", "bpm", "deleted_time", "duration", "genres", "instruments", "is_adult", "is_instrumental", "isrc", "keywords", "language", "lyrics", "model_releases", "moods", "published_time", "recording_version", "releases", "similar_artists", "submitted_time", "updated_time", "url", "vocal_description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contributor: 'Contributor',
        media_type: typing.Union[MetaOapg.properties.media_type, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        added_date: typing.Union[MetaOapg.properties.added_date, str, date, schemas.Unset] = schemas.unset,
        affiliate_url: typing.Union[MetaOapg.properties.affiliate_url, str, schemas.Unset] = schemas.unset,
        album: typing.Union['Album', schemas.Unset] = schemas.unset,
        artists: typing.Union[MetaOapg.properties.artists, list, tuple, schemas.Unset] = schemas.unset,
        assets: typing.Union['AudioAssets', schemas.Unset] = schemas.unset,
        bpm: typing.Union[MetaOapg.properties.bpm, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        deleted_time: typing.Union[MetaOapg.properties.deleted_time, str, datetime, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        genres: typing.Union['AudioGenres', schemas.Unset] = schemas.unset,
        instruments: typing.Union['AudioInstruments', schemas.Unset] = schemas.unset,
        is_adult: typing.Union[MetaOapg.properties.is_adult, bool, schemas.Unset] = schemas.unset,
        is_instrumental: typing.Union[MetaOapg.properties.is_instrumental, bool, schemas.Unset] = schemas.unset,
        isrc: typing.Union[MetaOapg.properties.isrc, str, schemas.Unset] = schemas.unset,
        keywords: typing.Union['AudioKeywords', schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        lyrics: typing.Union[MetaOapg.properties.lyrics, str, schemas.Unset] = schemas.unset,
        model_releases: typing.Union[MetaOapg.properties.model_releases, list, tuple, schemas.Unset] = schemas.unset,
        moods: typing.Union['AudioMoods', schemas.Unset] = schemas.unset,
        published_time: typing.Union[MetaOapg.properties.published_time, str, datetime, schemas.Unset] = schemas.unset,
        recording_version: typing.Union[MetaOapg.properties.recording_version, str, schemas.Unset] = schemas.unset,
        releases: typing.Union['AudioReleases', schemas.Unset] = schemas.unset,
        similar_artists: typing.Union[MetaOapg.properties.similar_artists, list, tuple, schemas.Unset] = schemas.unset,
        submitted_time: typing.Union[MetaOapg.properties.submitted_time, str, datetime, schemas.Unset] = schemas.unset,
        updated_time: typing.Union[MetaOapg.properties.updated_time, str, datetime, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        vocal_description: typing.Union[MetaOapg.properties.vocal_description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Audio':
        return super().__new__(
            cls,
            *args,
            contributor=contributor,
            media_type=media_type,
            id=id,
            title=title,
            description=description,
            added_date=added_date,
            affiliate_url=affiliate_url,
            album=album,
            artists=artists,
            assets=assets,
            bpm=bpm,
            deleted_time=deleted_time,
            duration=duration,
            genres=genres,
            instruments=instruments,
            is_adult=is_adult,
            is_instrumental=is_instrumental,
            isrc=isrc,
            keywords=keywords,
            language=language,
            lyrics=lyrics,
            model_releases=model_releases,
            moods=moods,
            published_time=published_time,
            recording_version=recording_version,
            releases=releases,
            similar_artists=similar_artists,
            submitted_time=submitted_time,
            updated_time=updated_time,
            url=url,
            vocal_description=vocal_description,
            _configuration=_configuration,
            **kwargs,
        )

from shutterstock_python_sdk.model.album import Album
from shutterstock_python_sdk.model.artist import Artist
from shutterstock_python_sdk.model.audio_assets import AudioAssets
from shutterstock_python_sdk.model.audio_genres import AudioGenres
from shutterstock_python_sdk.model.audio_instruments import AudioInstruments
from shutterstock_python_sdk.model.audio_keywords import AudioKeywords
from shutterstock_python_sdk.model.audio_moods import AudioMoods
from shutterstock_python_sdk.model.audio_releases import AudioReleases
from shutterstock_python_sdk.model.contributor import Contributor
from shutterstock_python_sdk.model.model_release import ModelRelease
