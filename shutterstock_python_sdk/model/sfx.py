# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401


class SFX(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    SFX metadata
    """


    class MetaOapg:
        required = {
            "contributor",
            "media_type",
            "id",
        }
        
        class properties:
        
            @staticmethod
            def contributor() -> typing.Type['Contributor']:
                return Contributor
            id = schemas.StrSchema
            media_type = schemas.StrSchema
            title = schemas.StrSchema
            description = schemas.StrSchema
            added_date = schemas.DateSchema
            affiliate_url = schemas.StrSchema
            artist = schemas.StrSchema
        
            @staticmethod
            def assets() -> typing.Type['SFXAssets']:
                return SFXAssets
            duration = schemas.NumberSchema
        
            @staticmethod
            def keywords() -> typing.Type['SFXKeywords']:
                return SFXKeywords
        
            @staticmethod
            def releases() -> typing.Type['SFXReleases']:
                return SFXReleases
            updated_time = schemas.DateTimeSchema
            url = schemas.StrSchema
            __annotations__ = {
                "contributor": contributor,
                "id": id,
                "media_type": media_type,
                "title": title,
                "description": description,
                "added_date": added_date,
                "affiliate_url": affiliate_url,
                "artist": artist,
                "assets": assets,
                "duration": duration,
                "keywords": keywords,
                "releases": releases,
                "updated_time": updated_time,
                "url": url,
            }
    
    contributor: 'Contributor'
    media_type: MetaOapg.properties.media_type
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contributor"]) -> 'Contributor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_type"]) -> MetaOapg.properties.media_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["added_date"]) -> MetaOapg.properties.added_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["affiliate_url"]) -> MetaOapg.properties.affiliate_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["artist"]) -> MetaOapg.properties.artist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assets"]) -> 'SFXAssets': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keywords"]) -> 'SFXKeywords': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releases"]) -> 'SFXReleases': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_time"]) -> MetaOapg.properties.updated_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contributor", "id", "media_type", "title", "description", "added_date", "affiliate_url", "artist", "assets", "duration", "keywords", "releases", "updated_time", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contributor"]) -> 'Contributor': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_type"]) -> MetaOapg.properties.media_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["added_date"]) -> typing.Union[MetaOapg.properties.added_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["affiliate_url"]) -> typing.Union[MetaOapg.properties.affiliate_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["artist"]) -> typing.Union[MetaOapg.properties.artist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assets"]) -> typing.Union['SFXAssets', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keywords"]) -> typing.Union['SFXKeywords', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releases"]) -> typing.Union['SFXReleases', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_time"]) -> typing.Union[MetaOapg.properties.updated_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contributor", "id", "media_type", "title", "description", "added_date", "affiliate_url", "artist", "assets", "duration", "keywords", "releases", "updated_time", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contributor: 'Contributor',
        media_type: typing.Union[MetaOapg.properties.media_type, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        added_date: typing.Union[MetaOapg.properties.added_date, str, date, schemas.Unset] = schemas.unset,
        affiliate_url: typing.Union[MetaOapg.properties.affiliate_url, str, schemas.Unset] = schemas.unset,
        artist: typing.Union[MetaOapg.properties.artist, str, schemas.Unset] = schemas.unset,
        assets: typing.Union['SFXAssets', schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        keywords: typing.Union['SFXKeywords', schemas.Unset] = schemas.unset,
        releases: typing.Union['SFXReleases', schemas.Unset] = schemas.unset,
        updated_time: typing.Union[MetaOapg.properties.updated_time, str, datetime, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SFX':
        return super().__new__(
            cls,
            *args,
            contributor=contributor,
            media_type=media_type,
            id=id,
            title=title,
            description=description,
            added_date=added_date,
            affiliate_url=affiliate_url,
            artist=artist,
            assets=assets,
            duration=duration,
            keywords=keywords,
            releases=releases,
            updated_time=updated_time,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from shutterstock_python_sdk.model.contributor import Contributor
from shutterstock_python_sdk.model.sfx_assets import SFXAssets
from shutterstock_python_sdk.model.sfx_keywords import SFXKeywords
from shutterstock_python_sdk.model.sfx_releases import SFXReleases
