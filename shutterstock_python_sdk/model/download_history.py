# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401


class DownloadHistory(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about a downloaded media item. Applicable for all media types, only one of 'audio', 'image' or 'video' will be in a single DownloadHistory object
    """


    class MetaOapg:
        required = {
            "license",
            "download_time",
            "id",
        }
        
        class properties:
            download_time = schemas.DateTimeSchema
            id = schemas.StrSchema
            license = schemas.StrSchema
        
            @staticmethod
            def audio() -> typing.Type['DownloadHistoryMediaDetails']:
                return DownloadHistoryMediaDetails
        
            @staticmethod
            def image() -> typing.Type['DownloadHistoryMediaDetails']:
                return DownloadHistoryMediaDetails
            is_downloadable = schemas.BoolSchema
            metadata = schemas.DictSchema
        
            @staticmethod
            def revshare() -> typing.Type['DownloadHistoryRevshareDetails']:
                return DownloadHistoryRevshareDetails
            subscription_id = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['DownloadHistoryUserDetails']:
                return DownloadHistoryUserDetails
        
            @staticmethod
            def video() -> typing.Type['DownloadHistoryMediaDetails']:
                return DownloadHistoryMediaDetails
            __annotations__ = {
                "download_time": download_time,
                "id": id,
                "license": license,
                "audio": audio,
                "image": image,
                "is_downloadable": is_downloadable,
                "metadata": metadata,
                "revshare": revshare,
                "subscription_id": subscription_id,
                "user": user,
                "video": video,
            }
    
    license: MetaOapg.properties.license
    download_time: MetaOapg.properties.download_time
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download_time"]) -> MetaOapg.properties.download_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio"]) -> 'DownloadHistoryMediaDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> 'DownloadHistoryMediaDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_downloadable"]) -> MetaOapg.properties.is_downloadable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["revshare"]) -> 'DownloadHistoryRevshareDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription_id"]) -> MetaOapg.properties.subscription_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DownloadHistoryUserDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video"]) -> 'DownloadHistoryMediaDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["download_time", "id", "license", "audio", "image", "is_downloadable", "metadata", "revshare", "subscription_id", "user", "video", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download_time"]) -> MetaOapg.properties.download_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audio"]) -> typing.Union['DownloadHistoryMediaDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union['DownloadHistoryMediaDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_downloadable"]) -> typing.Union[MetaOapg.properties.is_downloadable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["revshare"]) -> typing.Union['DownloadHistoryRevshareDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription_id"]) -> typing.Union[MetaOapg.properties.subscription_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['DownloadHistoryUserDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video"]) -> typing.Union['DownloadHistoryMediaDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["download_time", "id", "license", "audio", "image", "is_downloadable", "metadata", "revshare", "subscription_id", "user", "video", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        license: typing.Union[MetaOapg.properties.license, str, ],
        download_time: typing.Union[MetaOapg.properties.download_time, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        audio: typing.Union['DownloadHistoryMediaDetails', schemas.Unset] = schemas.unset,
        image: typing.Union['DownloadHistoryMediaDetails', schemas.Unset] = schemas.unset,
        is_downloadable: typing.Union[MetaOapg.properties.is_downloadable, bool, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        revshare: typing.Union['DownloadHistoryRevshareDetails', schemas.Unset] = schemas.unset,
        subscription_id: typing.Union[MetaOapg.properties.subscription_id, str, schemas.Unset] = schemas.unset,
        user: typing.Union['DownloadHistoryUserDetails', schemas.Unset] = schemas.unset,
        video: typing.Union['DownloadHistoryMediaDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DownloadHistory':
        return super().__new__(
            cls,
            *args,
            license=license,
            download_time=download_time,
            id=id,
            audio=audio,
            image=image,
            is_downloadable=is_downloadable,
            metadata=metadata,
            revshare=revshare,
            subscription_id=subscription_id,
            user=user,
            video=video,
            _configuration=_configuration,
            **kwargs,
        )

from shutterstock_python_sdk.model.download_history_media_details import DownloadHistoryMediaDetails
from shutterstock_python_sdk.model.download_history_revshare_details import DownloadHistoryRevshareDetails
from shutterstock_python_sdk.model.download_history_user_details import DownloadHistoryUserDetails
