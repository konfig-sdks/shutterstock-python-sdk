# coding: utf-8

"""
    Shutterstock API Explorer

    The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

    The version of the OpenAPI document: 1.1.32
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from shutterstock_python_sdk import schemas  # noqa: F401


class Descriptors(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about a descriptor
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['DescriptorsTags']:
                return DescriptorsTags
            average_render_speed = schemas.NumberSchema
            
            
            class bands(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Bands']:
                        return Bands
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Bands'], typing.List['Bands']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bands':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Bands':
                    return super().__getitem__(i)
            id = schemas.StrSchema
            
            
            class instruments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Instruments']:
                        return Instruments
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Instruments'], typing.List['Instruments']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'instruments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Instruments':
                    return super().__getitem__(i)
            max_tempo = schemas.NumberSchema
            min_tempo = schemas.NumberSchema
            name = schemas.StrSchema
            
            
            class previews(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Preview']:
                        return Preview
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Preview'], typing.List['Preview']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'previews':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Preview':
                    return super().__getitem__(i)
            __annotations__ = {
                "tags": tags,
                "average_render_speed": average_render_speed,
                "bands": bands,
                "id": id,
                "instruments": instruments,
                "max_tempo": max_tempo,
                "min_tempo": min_tempo,
                "name": name,
                "previews": previews,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'DescriptorsTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["average_render_speed"]) -> MetaOapg.properties.average_render_speed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bands"]) -> MetaOapg.properties.bands: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instruments"]) -> MetaOapg.properties.instruments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_tempo"]) -> MetaOapg.properties.max_tempo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min_tempo"]) -> MetaOapg.properties.min_tempo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previews"]) -> MetaOapg.properties.previews: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "average_render_speed", "bands", "id", "instruments", "max_tempo", "min_tempo", "name", "previews", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['DescriptorsTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["average_render_speed"]) -> typing.Union[MetaOapg.properties.average_render_speed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bands"]) -> typing.Union[MetaOapg.properties.bands, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instruments"]) -> typing.Union[MetaOapg.properties.instruments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_tempo"]) -> typing.Union[MetaOapg.properties.max_tempo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min_tempo"]) -> typing.Union[MetaOapg.properties.min_tempo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previews"]) -> typing.Union[MetaOapg.properties.previews, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "average_render_speed", "bands", "id", "instruments", "max_tempo", "min_tempo", "name", "previews", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['DescriptorsTags', schemas.Unset] = schemas.unset,
        average_render_speed: typing.Union[MetaOapg.properties.average_render_speed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bands: typing.Union[MetaOapg.properties.bands, list, tuple, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        instruments: typing.Union[MetaOapg.properties.instruments, list, tuple, schemas.Unset] = schemas.unset,
        max_tempo: typing.Union[MetaOapg.properties.max_tempo, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        min_tempo: typing.Union[MetaOapg.properties.min_tempo, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        previews: typing.Union[MetaOapg.properties.previews, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Descriptors':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            average_render_speed=average_render_speed,
            bands=bands,
            id=id,
            instruments=instruments,
            max_tempo=max_tempo,
            min_tempo=min_tempo,
            name=name,
            previews=previews,
            _configuration=_configuration,
            **kwargs,
        )

from shutterstock_python_sdk.model.bands import Bands
from shutterstock_python_sdk.model.descriptors_tags import DescriptorsTags
from shutterstock_python_sdk.model.instruments import Instruments
from shutterstock_python_sdk.model.preview import Preview
